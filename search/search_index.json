{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Luajit","text":"<p>Luajit is a simple scripting envirment with Lua via an custom Lua API made in Rust</p>"},{"location":"#download","title":"Download","text":"<ul> <li>Latest Release - v0.2.0</li> </ul>"},{"location":"#versions","title":"Versions","text":"<ul> <li>v0.2.0</li> <li>v0.1.13</li> <li>v0.1.12</li> <li>v0.1.11</li> <li>v0.1.10</li> <li>v0.1.9 @Deprecated</li> <li>v0.1.8 @Deprecated</li> <li>v0.1.7 @Deprecated</li> <li>v0.1.6 @Deprecated</li> <li>v0.1.5 @Deprecated</li> <li>v0.1.4 @Deprecated</li> </ul>"},{"location":"#more","title":"More","text":"<ul> <li>Changelog</li> <li>Source</li> </ul>"},{"location":"#releases","title":"Releases","text":"<ul> <li>v0.2.0</li> <li>v0.1.13</li> <li>v0.1.12</li> <li>v0.1.11</li> <li>v0.1.10</li> <li>v0.1.9</li> <li>v0.1.8</li> <li>v0.1.7</li> <li>v0.1.6</li> <li>v0.1.5</li> <li>v0.1.4</li> </ul>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#020","title":"0.2.0","text":""},{"location":"CHANGELOG/#big-changes","title":"Big Changes","text":"<p>The programm is now called <code>flua</code></p>"},{"location":"CHANGELOG/#full-change-list","title":"Full Change List","text":"<ul> <li>renamed programm to flua</li> <li>added flalaxy in another repository, the installer for flua - https://github.com/ShadowDara/flalaxy</li> <li>added server with api but does not work :(</li> <li>added <code>dapi_os.run2()</code> - runs a command with instant no flush, the command does not wait with the output until its finished</li> <li>added <code>open</code> to open files and links in the standard program</li> <li>changed some messages and changed error time to 3 seconds instead of 2</li> <li>reorganised Code and Help Message in the main.rs file</li> <li>extented the version check function to interupt the script if wanted, and added an optional 3rd argument <code>(bool)</code> if the script should be interrupted</li> <li>added function to throw an custom Error</li> <li>added <code>startmenu</code> and <code>local_startmenu</code> from <code>some_default_dirs</code> to <code>dapi_io.get_default_directories</code></li> <li>added clear - a function to clear the Terminal Window Content</li> <li>added a function run3() to run a command async in the terminal</li> <li>added a global <code>SCRIPT_FULL_PATH</code> var to Lua</li> <li>added Functions in the OS Lib <code>secure_path()</code>, <code>split_path()</code> and <code>join_path()</code></li> <li>added a Function to decode JSON with comments</li> <li>JSON encode function makes now always compressed JSON, but pretty JSON can be enable with an 2nd Optional Boolean Argument as <code>true</code></li> <li>fixed an error in the copy file function</li> <li>added Tests for Base64</li> <li>added <code>h</code> as a command to print the help message</li> <li>fixed Output bug in <code>run2()</code></li> <li>added tests for the YAML Module</li> <li>added a BUILDS file and changed some stuff in the README.md</li> <li>added Workflow to zip the documentation and upload it to the next Github Workflow</li> <li>fixed some paths in the IO and the OS Library</li> <li>fixed Workflow for Windows Builds</li> <li>fixed ZIP functions and added Tests to them</li> <li>added <code>SCRIPT_DIRECTOY</code> as a global var to Lua</li> <li>added Tests for join paths and other paths function</li> <li>added a Makefile for the build so i dont have to remember commands</li> <li>added <code>dir</code> tests</li> <li>added function to convert compressed json in pretty json and the other way around</li> <li>added tests for JSON</li> <li>added Tests to the SCRIPT Vars in Lua</li> <li>fixed an Error in Join path function and a build script error</li> <li>fixed secure path for UNIX Systems</li> <li>added Commands to the Makefile</li> <li>added Module Stuff</li> <li>added Module Tests</li> <li><code>run3()</code> runs now a command with colors</li> </ul> <p>Read the DOCS for Version 0.2.0 for more Infos</p>"},{"location":"CHANGELOG/#0113-10102025","title":"0.1.13 - 10.10.2025","text":"<ul> <li>add auto publish for the mkdocs documentation</li> <li>restructered some Code</li> <li>added async http servers</li> <li>made the whole code async via Tokio</li> <li>added Version parser for modules</li> <li>added command testing script</li> <li>added option to get the Version</li> <li>added Exit Code 1 when an Error happends</li> <li>added better Build for Linux</li> <li>fixed dev container dependescies</li> <li>added NET Library</li> <li>added Script to get all versions</li> <li>reformatted some folders</li> <li>reformatted some scripts</li> <li>added option to give arguments to luajit</li> <li>added Client to the Download File function</li> <li>added Colors to the help Info</li> <li>added Docs to the NSIS Installer for Windows</li> <li>added NSIS Installer to Release Workflow</li> <li>added Docs publish Workflow</li> <li>added Install Workflow for Luajit</li> <li>added async stopwatch to stop time</li> </ul> <p>Read the DOCS for Version 0.1.13 for more Infos</p>"},{"location":"CHANGELOG/#0112-08102025","title":"0.1.12 - 08.10.2025","text":"<ul> <li>added yaml parser</li> <li>updated install script</li> <li>delered NSIS Admin Installer</li> <li>added a function to wait for a certain period of time</li> <li>added Ini Parser</li> <li>added Data Tests</li> <li>added Base64 Encoding</li> <li>added a function to copy a dir recursivly</li> <li>added a function to get the file size</li> <li>added Desktop Shortcut to the NSIS Installer</li> <li>added XML Parser</li> <li>added better help Message</li> </ul> <p>Read the DOCS for Version 0.1.12 for more Infos</p>"},{"location":"CHANGELOG/#0111-05102025","title":"0.1.11 - 05.10.2025","text":"<ul> <li>added Function to delete a directory</li> <li>added default script option to the Installer</li> <li>added Copy File Function</li> <li>add Built for Linux aarch 64</li> <li>added dotenv parsing</li> <li>added Download Shell Script</li> </ul> <p>Read the DOCS for Version 0.1.11 for more Infos</p>"},{"location":"CHANGELOG/#0110-05102025","title":"0.1.10 - 05.10.2025","text":"<ul> <li>added Function to Check the OS Type to make code in the script which runs only on a particular OS</li> <li>added Function to get the default dirs</li> <li>added getcwd and chdir function</li> <li>added JSON Encoding and Decoding</li> <li>added TOML Parsing</li> </ul> <p>Read the DOCS for Version 0.1.10 for more Infos</p>"},{"location":"CHANGELOG/#019-04102025","title":"0.1.9 - 04.10.2025","text":"<ul> <li>made the deprecated warning yellow</li> <li>reorganisized some code</li> <li>added ANSI Colorcodes</li> <li>added Lua Function to get the colorcodes</li> <li>started Docs</li> <li>updated check version message</li> <li>add NSIS Installer for windows</li> </ul>"},{"location":"CHANGELOG/#018-01102025","title":"0.1.8 - 01.10.2025","text":"<ul> <li>Read Files Line by Line</li> <li>Restructering the whole Code</li> <li>added return Value to <code>dapi.download</code> function</li> <li>added Version check</li> <li>add static HTTP Server which is not async yet which means the Server blocks the script! Server can be stopped by just pressing enter</li> <li>open with now works on windows</li> </ul>"},{"location":"CHANGELOG/#017-07092025","title":"0.1.7 - 07.09.2025","text":"<ul> <li>added Function to create a directory</li> <li>to create files</li> <li>to write to files</li> <li>added help output</li> </ul>"},{"location":"CHANGELOG/#016-05092025","title":"0.1.6 - 05.09.2025","text":"<ul> <li>added OS and Version Info</li> <li>added Lua Test File</li> <li>added Icon for Windows</li> </ul>"},{"location":"CHANGELOG/#015-05092025","title":"0.1.5 - 05.09.2025","text":"<ul> <li>added Zipping and Unzipping Features</li> </ul>"},{"location":"CHANGELOG/#014-04092025","title":"0.1.4 - 04.09.2025","text":""},{"location":"CHANGELOG/#011","title":"0.1.1","text":""},{"location":"CHANGELOG/#010-02092025","title":"0.1.0 - 02.09.2025","text":"<p>Intential Release</p>"},{"location":"MLua-std/","title":"MLua std","text":"<p>for creating the Lua Bindungs to Rust, we used MLua. This Page contains some Information about the default Lua API which MLua already provides</p>"},{"location":"MLua-std/#osexecute","title":"os.execute","text":""},{"location":"v0.1.10/","title":"Version 0.1.10","text":"<ul> <li>Release Date: 05.10.2025</li> </ul>"},{"location":"v0.1.10/#download","title":"Download","text":"<ul> <li>v0.1.10</li> </ul>"},{"location":"v0.1.10/#changelog","title":"Changelog","text":"<ul> <li>added Function to Check the OS Type to make code in the script which runs only on a particular OS</li> <li>added Function to get the default dirs</li> <li>added getcwd and chdir function</li> <li>added JSON Encoding and Decoding</li> <li>added TOML Parsing</li> </ul> <p>Read the DOCS for Version 0.1.10 for more Infos</p>"},{"location":"v0.1.10/#info","title":"Info","text":"<p>Documentation is NOT complete yet, but all funktion headers are listed in the documentation</p>"},{"location":"v0.1.10/Dapi/","title":"Dapi","text":""},{"location":"v0.1.10/Dapi/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi = require(\"dapi\")\n</code></pre>"},{"location":"v0.1.10/Dapi/#greet","title":"greet","text":""},{"location":"v0.1.10/Dapi/#add","title":"add","text":""},{"location":"v0.1.10/Dapi/#version","title":"version","text":"<p>a function which returns the current running version of luajit as a string</p> <p>Usage</p> <pre><code>print(dapi.version())\n</code></pre>"},{"location":"v0.1.10/Dapi/#check_version","title":"check_version","text":"<p>a function to check if the correct version of Luajit is used, first parameter is the correct Version and second parameter is a Boolean for showing a warning or info message</p> <p>Usage</p> <pre><code>dapi.check_version(\"0.1.9\", true)\n</code></pre>"},{"location":"v0.1.10/Dapi/#download","title":"download","text":"<p><code>download(url: string, destination: string) -&gt; bool</code></p> <p>Downloads a file from a URL and saves it to the given destination path.</p> <p>Usage</p> <pre><code>local ok = dapi.download(\"https://example.com/file.zip\", \"/tmp/file.zip\")\nif ok then\n  print(\"Success!\")\nelse\n  print(\"Failed.\")\nend\n</code></pre> <p>IMPORTANT</p> <p>Returns <code>false</code> on any error (network, file I/O, write failure).</p>"},{"location":"v0.1.10/Dapi/#get_colors","title":"get_colors","text":"<p>a function which returns a Lua Table containing a lot of usable ANSI Color Codes for colored output</p> <p>Usage</p> <pre><code>local colors = dapi.get_colors()\nprint(colors.red + \"Hallo\" + colors.end)\n</code></pre> <p>Different Color Codes IMPORANT: Dont use the Color names in UPPERCASES, use lowercase letters instead !!!</p> <pre><code>// Color codes for Colorful printing with Ansi Colorcodes\n// Credit to for colorcodes\n// https://ss64.com/nt/syntax-ansi.html\npub const END: &amp;str = \"\\x1b[0m\";\npub const BOLD: &amp;str = \"\\x1b[1m\";\n\npub const ITALIC: &amp;str = \"\\x1b[3m\";\npub const UNDERLINED: &amp;str = \"\\x1b[4m\";\n\npub const REVERSE_TEXT: &amp;str = \"\\x1b[7m\";\n\npub const NOT_UNDERLINED: &amp;str = \"\\x1b[24m\";\n\npub const POSITIVE_TEXT: &amp;str = \"\\x1b[27m\";\n\npub const BLACK: &amp;str = \"\\x1b[30m\";\npub const RED: &amp;str = \"\\x1b[31m\";\npub const GREEN: &amp;str = \"\\x1b[32m\";\npub const YELLOW: &amp;str = \"\\x1b[33m\";\npub const BLUE:  &amp;str = \"\\x1b[34m\";\npub const PURPLE: &amp;str = \"\\x1b[35m\";\npub const CYAN: &amp;str = \"\\x1b[36m\";\npub const WHITE: &amp;str = \"\\x1b[37m\";\n\npub const BG_BLACK: &amp;str = \"\\x1b[40m\";\npub const BG_RED: &amp;str = \"\\x1b[41m\";\npub const BG_GREEN: &amp;str = \"\\x1b[42m\";\npub const BG_YELLOW: &amp;str = \"\\x1b[43m\";\npub const BG_BLUE:  &amp;str = \"\\x1b[44m\";\npub const BG_PURPLE: &amp;str = \"\\x1b[45m\";\npub const BG_CYAN: &amp;str = \"\\x1b[46m\";\npub const BG_WHITE: &amp;str = \"\\x1b[47m\";\n\npub const BRIGHT_BLACK: &amp;str = \"\\x1b[90m\";\npub const BRIGHT_RED: &amp;str = \"\\x1b[91m\";\npub const BRIGHT_GREEN: &amp;str = \"\\x1b[92m\";\npub const BRIGHT_YELLOW: &amp;str = \"\\x1b[93m\";\npub const BRIGHT_BLUE: &amp;str = \"\\x1b[94m\";\npub const BRIGHT_PURLPE: &amp;str = \"\\x1b[95m\";\npub const BRIGHT_CYAN: &amp;str = \"\\x1b[96m\";\npub const BRIGHT_WHITE: &amp;str = \"\\x1b[97m\";\n\npub const BG_BRIGHT_BLACK: &amp;str = \"\\x1b[100m\";\npub const BG_BRIGHT_RED: &amp;str = \"\\x1b[101m\";\npub const BG_BRIGHT_GREEN: &amp;str = \"\\x1b[102m\";\npub const BG_BRIGHT_YELLOW: &amp;str = \"\\x1b[103m\";\npub const BG_BRIGHT_BLUE: &amp;str = \"\\x1b[104m\";\npub const BG_BRIGHT_PURLPE: &amp;str = \"\\x1b[105m\";\npub const BG_BRIGHT_CYAN: &amp;str = \"\\x1b[106m\";\npub const BG_BRIGHT_WHITE: &amp;str = \"\\x1b[107m\";\n</code></pre>"},{"location":"v0.1.10/Dapi_HTTP/","title":"Dapi HTTP","text":""},{"location":"v0.1.10/Dapi_HTTP/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_http\")\n</code></pre>"},{"location":"v0.1.10/Dapi_HTTP/#start_static_server","title":"start_static_server","text":"<p>function to start a static http server from a directory</p> <p>Usage</p> <pre><code>dapi_http.start_static_server(\".\", 8080)\n</code></pre>"},{"location":"v0.1.10/Dapi_IO/","title":"Dapi IO","text":""},{"location":"v0.1.10/Dapi_IO/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_io = require(\"dapi_io\")\n</code></pre>"},{"location":"v0.1.10/Dapi_IO/#zip","title":"zip","text":""},{"location":"v0.1.10/Dapi_IO/#unzip","title":"unzip","text":""},{"location":"v0.1.10/Dapi_IO/#get_dafault_directories","title":"get_dafault_directories","text":"<p>a function which returns a lua table containing a lot of dafault directories</p> <p>Usage</p> <pre><code>local dir = dapi_io.get_default_directories()\nprint(dir.home)\n</code></pre> <p>Path Overview</p> Name Windows Linux home C:\\Users\\username /home/username desktop documents ~/Documents downloads ~/Downloads music videos pictures config %APPDATA% ~/.config data %APPDATA% ~/.local/share localdata %LOCALAPPDATA% ~/.local/share cache C:\\Users\\username\\AppData\\Local\\Cache ~/.cache"},{"location":"v0.1.10/Dapi_IO/#create_dir","title":"create_dir","text":"<p>function to create a directory</p> <p>Usage</p> <pre><code>dapi_io.create_dir(\"Wtf\")\n</code></pre>"},{"location":"v0.1.10/Dapi_IO/#create_file","title":"create_file","text":""},{"location":"v0.1.10/Dapi_IO/#write_file","title":"write_file","text":""},{"location":"v0.1.10/Dapi_IO/#read_line","title":"<code>read_line()</code>","text":"<p>Reads a text file and returns its contents as a Lua table, line by line. Optionally, a maximum number of lines can be specified.</p> <p>Lua Function Signature</p> <pre><code>lines = read_line(path [, max_lines])\n</code></pre> <p>Parameters</p> Name Type Required Description <code>path</code> <code>string</code> Yes The file path to read from <code>max_lines</code> <code>number</code> No Maximum number of lines to read (optional) <p>Return Value</p> <p>Returns a Lua <code>table</code> where each line of the file is stored as a string:</p> Index Value <code>1</code> First line <code>2</code> Second line <p>Example (in Lua)</p> <pre><code>local lines = read_line(\"example.txt\", 5)\n\nfor i, line in ipairs(lines) do\n    print(i .. \": \" .. line)\nend\n</code></pre> <p>Error Handling</p> <ul> <li>If the file cannot be opened, an error is raised: <code>\"Open file error: &lt;details&gt;\"</code></li> <li>If a line cannot be read, an error is raised: <code>\"Read line error: &lt;details&gt;\"</code></li> <li>File reading stops early if <code>max_lines</code> is provided and reached.</li> </ul>"},{"location":"v0.1.10/Dapi_OS/","title":"Dapi OS","text":""},{"location":"v0.1.10/Dapi_OS/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_os = require(\"dapi_os\")\n</code></pre>"},{"location":"v0.1.10/Dapi_OS/#get_os_info","title":"<code>get_os_info()</code>","text":"<p>This Lua function returns basic system information such as OS type, version, hostname, CPU count, and total memory.</p> <p>Usage</p> <pre><code>table = dapi_os.get_os_info()\n</code></pre> <p>Return Value</p> <p>A Lua <code>table</code> with the following fields:</p> Key Type Description <code>os_type</code> <code>string</code> The operating system type (e.g., <code>\"Linux\"</code>, <code>\"Windows\"</code>) <code>os_release</code> <code>string</code> OS release/version string <code>hostname</code> <code>string</code> The system's hostname <code>cpu_num</code> <code>number</code> Number of available CPU cores <code>mem_total</code> <code>number</code> Total physical memory in kilobytes (KB) <p>Usage Example (in Lua)</p> <pre><code>local info = get_os_info()\n\nprint(\"OS Type:   \" .. info.os_type)\nprint(\"OS Version:\" .. info.os_release)\nprint(\"Hostname:  \" .. info.hostname)\nprint(\"CPU Cores: \" .. info.cpu_num)\nprint(\"RAM Total: \" .. info.mem_total .. \" KB\")\n</code></pre> <p>Error Handling</p> <ul> <li>If any system information is unavailable (e.g., due to permission issues), fallback values are used:</li> <li><code>\"Unknown\"</code> for strings</li> <li><code>0</code> for numbers</li> <li>This ensures the function always returns a valid Lua table without runtime errors.</li> </ul>"},{"location":"v0.1.10/Dapi_OS/#os","title":"<code>os()</code>","text":"<p>to function to check if the current used os is windows, linux or macos and depending on that, run special Code</p> <p>Usage</p> <pre><code>local osdata = dapi_os.os()\n\nif osdata.win then\n    print(\"You are using Windows\")\nelseif osdata.lin then\n    print(\"You are using Linux\")\nelseif osdata.mac then\n    print(\"You are using MacOS\")\nend\n</code></pre>"},{"location":"v0.1.10/Dapi_OS/#chdir","title":"<code>chdir()</code>","text":"<p>a function to change the current execution directory</p> <p>Usage</p> <pre><code>-- create a new directory\ndapi_io.create_dir(\"wtf\")\n\ndapi_os.chdir(\"wtf\")\n</code></pre>"},{"location":"v0.1.10/Dapi_OS/#getcwd","title":"<code>getcwd()</code>","text":"<p>a function which returns the current executing directory as a string</p> <p>Usage</p> <pre><code>local cwd = dapi_os.getcwd()\n</code></pre>"},{"location":"v0.1.10/Dapi_OS/#open_link","title":"<code>open_link()</code>","text":"<p>opens a link in the standard browser of the User</p> <p>Usage</p> <pre><code>dapi_os.open_link(\"https://github.com/shadowdara\")\n</code></pre>"},{"location":"v0.1.10/Dapi_OS/#run","title":"<code>run()</code>","text":""},{"location":"v0.1.10/Dapi_data/","title":"Dapi data","text":""},{"location":"v0.1.10/Dapi_data/#json","title":"JSON","text":""},{"location":"v0.1.10/Dapi_data/#import","title":"import","text":"<pre><code>local dapi_json = require(\"dapi_json\")\n</code></pre>"},{"location":"v0.1.10/Dapi_data/#decode2","title":"decode2","text":"<p>a function to decode JSON to a LUa Table</p> <pre><code>local json_string = \"{allo: \"kkkk\"}\"\nlocal json = dapi_json.decode2(json_string)\n</code></pre>"},{"location":"v0.1.10/Dapi_data/#encode","title":"encode","text":"<p>a function to encode a Lua Table to JSON</p> <pre><code>local lua_table = {\n  key = \"value\",\n  numbers = {1, 2, 3},\n  flag = true,\n}\n\nlocal json_string = dapi_json.encode(lua_table)\n</code></pre>"},{"location":"v0.1.10/Dapi_data/#toml","title":"Toml","text":""},{"location":"v0.1.10/Dapi_data/#import_1","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_toml\")\n</code></pre>"},{"location":"v0.1.10/Dapi_data/#decode","title":"decode","text":"<p>decode toml data to a Lua Table</p> <pre><code>local input = [[\ntitle = \"Mein Beispiel\"\n\n[user]\nname = \"Alice\"\nage = 30\n]]\n\nlocal result = dapi_toml.decode(input)\n\nprint(result.title)           --&gt; \"Mein Beispiel\"\nprint(result.user.name)       --&gt; \"Alice\"\nprint(result.user.age)        --&gt; 30\n</code></pre>"},{"location":"v0.1.10/Dapi_data/#encode_1","title":"encode","text":"<p>encode a Lua table to toml data</p> <pre><code>local data = {\n    title = \"Konfiguration\",\n    settings = {\n        width = 1920,\n        height = 1080,\n        fullscreen = true\n    }\n}\n\nlocal toml_string = dapi_toml.encode(data)\nprint(toml_string)\n</code></pre>"},{"location":"v0.1.11/","title":"Version 0.1.11","text":"<ul> <li>Release Date: 05.10.2025</li> </ul>"},{"location":"v0.1.11/#download","title":"Download","text":"<ul> <li>v0.1.11</li> </ul>"},{"location":"v0.1.11/#changelog","title":"Changelog","text":"<ul> <li>added Function to delete a directory</li> <li>added default script option to the Installer</li> <li>added Copy File Function</li> <li>add Built for Linux aarch 64</li> <li>added dotenv parsing</li> <li>added Download Shell Script</li> </ul> <p>Read the DOCS for Version 0.1.11 for more Infos</p>"},{"location":"v0.1.11/#info","title":"Info","text":"<p>Documentation is NOT complete yet, but all funktion headers are listed in the documentation</p>"},{"location":"v0.1.11/Dapi/","title":"Dapi","text":""},{"location":"v0.1.11/Dapi/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi = require(\"dapi\")\n</code></pre>"},{"location":"v0.1.11/Dapi/#greet","title":"greet","text":""},{"location":"v0.1.11/Dapi/#add","title":"add","text":""},{"location":"v0.1.11/Dapi/#version","title":"version","text":"<p>a function which returns the current running version of luajit as a string</p> <p>Usage</p> <pre><code>print(dapi.version())\n</code></pre>"},{"location":"v0.1.11/Dapi/#check_version","title":"check_version","text":"<p>a function to check if the correct version of Luajit is used, first parameter is the correct Version and second parameter is a Boolean for showing a warning or info message</p> <p>Usage</p> <pre><code>dapi.check_version(\"0.1.9\", true)\n</code></pre>"},{"location":"v0.1.11/Dapi/#download","title":"download","text":"<p><code>download(url: string, destination: string) -&gt; bool</code></p> <p>Downloads a file from a URL and saves it to the given destination path.</p> <p>Usage</p> <pre><code>local ok = dapi.download(\"https://example.com/file.zip\", \"/tmp/file.zip\")\nif ok then\n  print(\"Success!\")\nelse\n  print(\"Failed.\")\nend\n</code></pre> <p>IMPORTANT</p> <p>Returns <code>false</code> on any error (network, file I/O, write failure).</p>"},{"location":"v0.1.11/Dapi/#get_colors","title":"get_colors","text":"<p>a function which returns a Lua Table containing a lot of usable ANSI Color Codes for colored output</p> <p>Usage</p> <pre><code>local colors = dapi.get_colors()\nprint(colors.red + \"Hallo\" + colors.end)\n</code></pre> <p>Different Color Codes IMPORANT: Dont use the Color names in UPPERCASES, use lowercase letters instead !!!</p> <pre><code>// Color codes for Colorful printing with Ansi Colorcodes\n// Credit to for colorcodes\n// https://ss64.com/nt/syntax-ansi.html\npub const END: &amp;str = \"\\x1b[0m\";\npub const BOLD: &amp;str = \"\\x1b[1m\";\n\npub const ITALIC: &amp;str = \"\\x1b[3m\";\npub const UNDERLINED: &amp;str = \"\\x1b[4m\";\n\npub const REVERSE_TEXT: &amp;str = \"\\x1b[7m\";\n\npub const NOT_UNDERLINED: &amp;str = \"\\x1b[24m\";\n\npub const POSITIVE_TEXT: &amp;str = \"\\x1b[27m\";\n\npub const BLACK: &amp;str = \"\\x1b[30m\";\npub const RED: &amp;str = \"\\x1b[31m\";\npub const GREEN: &amp;str = \"\\x1b[32m\";\npub const YELLOW: &amp;str = \"\\x1b[33m\";\npub const BLUE:  &amp;str = \"\\x1b[34m\";\npub const PURPLE: &amp;str = \"\\x1b[35m\";\npub const CYAN: &amp;str = \"\\x1b[36m\";\npub const WHITE: &amp;str = \"\\x1b[37m\";\n\npub const BG_BLACK: &amp;str = \"\\x1b[40m\";\npub const BG_RED: &amp;str = \"\\x1b[41m\";\npub const BG_GREEN: &amp;str = \"\\x1b[42m\";\npub const BG_YELLOW: &amp;str = \"\\x1b[43m\";\npub const BG_BLUE:  &amp;str = \"\\x1b[44m\";\npub const BG_PURPLE: &amp;str = \"\\x1b[45m\";\npub const BG_CYAN: &amp;str = \"\\x1b[46m\";\npub const BG_WHITE: &amp;str = \"\\x1b[47m\";\n\npub const BRIGHT_BLACK: &amp;str = \"\\x1b[90m\";\npub const BRIGHT_RED: &amp;str = \"\\x1b[91m\";\npub const BRIGHT_GREEN: &amp;str = \"\\x1b[92m\";\npub const BRIGHT_YELLOW: &amp;str = \"\\x1b[93m\";\npub const BRIGHT_BLUE: &amp;str = \"\\x1b[94m\";\npub const BRIGHT_PURLPE: &amp;str = \"\\x1b[95m\";\npub const BRIGHT_CYAN: &amp;str = \"\\x1b[96m\";\npub const BRIGHT_WHITE: &amp;str = \"\\x1b[97m\";\n\npub const BG_BRIGHT_BLACK: &amp;str = \"\\x1b[100m\";\npub const BG_BRIGHT_RED: &amp;str = \"\\x1b[101m\";\npub const BG_BRIGHT_GREEN: &amp;str = \"\\x1b[102m\";\npub const BG_BRIGHT_YELLOW: &amp;str = \"\\x1b[103m\";\npub const BG_BRIGHT_BLUE: &amp;str = \"\\x1b[104m\";\npub const BG_BRIGHT_PURLPE: &amp;str = \"\\x1b[105m\";\npub const BG_BRIGHT_CYAN: &amp;str = \"\\x1b[106m\";\npub const BG_BRIGHT_WHITE: &amp;str = \"\\x1b[107m\";\n</code></pre>"},{"location":"v0.1.11/Dapi_HTTP/","title":"Dapi HTTP","text":""},{"location":"v0.1.11/Dapi_HTTP/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_http\")\n</code></pre>"},{"location":"v0.1.11/Dapi_HTTP/#start_static_server","title":"start_static_server","text":"<p>function to start a static http server from a directory</p> <p>Usage</p> <pre><code>dapi_http.start_static_server(\".\", 8080)\n</code></pre>"},{"location":"v0.1.11/Dapi_IO/","title":"Dapi IO","text":""},{"location":"v0.1.11/Dapi_IO/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_io = require(\"dapi_io\")\n</code></pre>"},{"location":"v0.1.11/Dapi_IO/#zip","title":"zip","text":""},{"location":"v0.1.11/Dapi_IO/#unzip","title":"unzip","text":""},{"location":"v0.1.11/Dapi_IO/#get_dafault_directories","title":"get_dafault_directories","text":"<p>a function which returns a lua table containing a lot of dafault directories</p> <p>Usage</p> <pre><code>local dir = dapi_io.get_default_directories()\nprint(dir.home)\n</code></pre> <p>Path Overview</p> Name Windows Linux home C:\\Users\\username /home/username desktop documents ~/Documents downloads ~/Downloads music videos pictures config %APPDATA% ~/.config data %APPDATA% ~/.local/share localdata %LOCALAPPDATA% ~/.local/share cache C:\\Users\\username\\AppData\\Local\\Cache ~/.cache"},{"location":"v0.1.11/Dapi_IO/#create_dir","title":"create_dir","text":"<p>function to create a directory recursivly</p> <p>Usage</p> <pre><code>dapi_io.create_dir(\"Wtf\")\n</code></pre>"},{"location":"v0.1.11/Dapi_IO/#delete_dir","title":"delete_dir","text":"<p>function to delete a directory recursivly</p> <p>Usage</p> <pre><code>dapi_io.delete_dir(\"Wtf\")\n</code></pre>"},{"location":"v0.1.11/Dapi_IO/#copy_file","title":"copy_file","text":"<p>function to copy a file</p> <p>Usage</p> <pre><code>dapi_io.copy_file(\"hallo.txt\", \"wtf/hallo.txt\")\n</code></pre>"},{"location":"v0.1.11/Dapi_IO/#create_file","title":"create_file","text":""},{"location":"v0.1.11/Dapi_IO/#write_file","title":"write_file","text":""},{"location":"v0.1.11/Dapi_IO/#read_line","title":"<code>read_line()</code>","text":"<p>Reads a text file and returns its contents as a Lua table, line by line. Optionally, a maximum number of lines can be specified.</p> <p>Lua Function Signature</p> <pre><code>lines = read_line(path [, max_lines])\n</code></pre> <p>Parameters</p> Name Type Required Description <code>path</code> <code>string</code> Yes The file path to read from <code>max_lines</code> <code>number</code> No Maximum number of lines to read (optional) <p>Return Value</p> <p>Returns a Lua <code>table</code> where each line of the file is stored as a string:</p> Index Value <code>1</code> First line <code>2</code> Second line <p>Example (in Lua)</p> <pre><code>local lines = read_line(\"example.txt\", 5)\n\nfor i, line in ipairs(lines) do\n    print(i .. \": \" .. line)\nend\n</code></pre> <p>Error Handling</p> <ul> <li>If the file cannot be opened, an error is raised: <code>\"Open file error: &lt;details&gt;\"</code></li> <li>If a line cannot be read, an error is raised: <code>\"Read line error: &lt;details&gt;\"</code></li> <li>File reading stops early if <code>max_lines</code> is provided and reached.</li> </ul>"},{"location":"v0.1.11/Dapi_OS/","title":"Dapi OS","text":""},{"location":"v0.1.11/Dapi_OS/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_os = require(\"dapi_os\")\n</code></pre>"},{"location":"v0.1.11/Dapi_OS/#get_os_info","title":"<code>get_os_info()</code>","text":"<p>This Lua function returns basic system information such as OS type, version, hostname, CPU count, and total memory.</p> <p>Usage</p> <pre><code>table = dapi_os.get_os_info()\n</code></pre> <p>Return Value</p> <p>A Lua <code>table</code> with the following fields:</p> Key Type Description <code>os_type</code> <code>string</code> The operating system type (e.g., <code>\"Linux\"</code>, <code>\"Windows\"</code>) <code>os_release</code> <code>string</code> OS release/version string <code>hostname</code> <code>string</code> The system's hostname <code>cpu_num</code> <code>number</code> Number of available CPU cores <code>mem_total</code> <code>number</code> Total physical memory in kilobytes (KB) <p>Usage Example (in Lua)</p> <pre><code>local info = get_os_info()\n\nprint(\"OS Type:   \" .. info.os_type)\nprint(\"OS Version:\" .. info.os_release)\nprint(\"Hostname:  \" .. info.hostname)\nprint(\"CPU Cores: \" .. info.cpu_num)\nprint(\"RAM Total: \" .. info.mem_total .. \" KB\")\n</code></pre> <p>Error Handling</p> <ul> <li>If any system information is unavailable (e.g., due to permission issues), fallback values are used:</li> <li><code>\"Unknown\"</code> for strings</li> <li><code>0</code> for numbers</li> <li>This ensures the function always returns a valid Lua table without runtime errors.</li> </ul>"},{"location":"v0.1.11/Dapi_OS/#os","title":"<code>os()</code>","text":"<p>to function to check if the current used os is windows, linux or macos and depending on that, run special Code</p> <p>Usage</p> <pre><code>local osdata = dapi_os.os()\n\nif osdata.win then\n    print(\"You are using Windows\")\nelseif osdata.lin then\n    print(\"You are using Linux\")\nelseif osdata.mac then\n    print(\"You are using MacOS\")\nend\n</code></pre>"},{"location":"v0.1.11/Dapi_OS/#chdir","title":"<code>chdir()</code>","text":"<p>a function to change the current execution directory</p> <p>Usage</p> <pre><code>-- create a new directory\ndapi_io.create_dir(\"wtf\")\n\ndapi_os.chdir(\"wtf\")\n</code></pre>"},{"location":"v0.1.11/Dapi_OS/#getcwd","title":"<code>getcwd()</code>","text":"<p>a function which returns the current executing directory as a string</p> <p>Usage</p> <pre><code>local cwd = dapi_os.getcwd()\n</code></pre>"},{"location":"v0.1.11/Dapi_OS/#open_link","title":"<code>open_link()</code>","text":"<p>opens a link in the standard browser of the User</p> <p>Usage</p> <pre><code>dapi_os.open_link(\"https://github.com/shadowdara\")\n</code></pre>"},{"location":"v0.1.11/Dapi_OS/#run","title":"<code>run()</code>","text":""},{"location":"v0.1.11/Dapi_data/","title":"Dapi data","text":""},{"location":"v0.1.11/Dapi_data/#json","title":"JSON","text":""},{"location":"v0.1.11/Dapi_data/#import","title":"import","text":"<pre><code>local dapi_json = require(\"dapi_json\")\n</code></pre>"},{"location":"v0.1.11/Dapi_data/#decode2","title":"decode2","text":"<p>a function to decode JSON to a LUa Table</p> <pre><code>local json_string = \"{allo: \"kkkk\"}\"\nlocal json = dapi_json.decode2(json_string)\n</code></pre>"},{"location":"v0.1.11/Dapi_data/#encode","title":"encode","text":"<p>a function to encode a Lua Table to JSON</p> <pre><code>local lua_table = {\n  key = \"value\",\n  numbers = {1, 2, 3},\n  flag = true,\n}\n\nlocal json_string = dapi_json.encode(lua_table)\n</code></pre>"},{"location":"v0.1.11/Dapi_data/#toml","title":"Toml","text":""},{"location":"v0.1.11/Dapi_data/#import_1","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_toml\")\n</code></pre>"},{"location":"v0.1.11/Dapi_data/#decode","title":"decode","text":"<p>decode toml data to a Lua Table</p> <pre><code>local input = [[\ntitle = \"Mein Beispiel\"\n\n[user]\nname = \"Alice\"\nage = 30\n]]\n\nlocal result = dapi_toml.decode(input)\n\nprint(result.title)           --&gt; \"Mein Beispiel\"\nprint(result.user.name)       --&gt; \"Alice\"\nprint(result.user.age)        --&gt; 30\n</code></pre>"},{"location":"v0.1.11/Dapi_data/#encode_1","title":"encode","text":"<p>encode a Lua table to toml data</p> <pre><code>local data = {\n    title = \"Konfiguration\",\n    settings = {\n        width = 1920,\n        height = 1080,\n        fullscreen = true\n    }\n}\n\nlocal toml_string = dapi_toml.encode(data)\nprint(toml_string)\n</code></pre>"},{"location":"v0.1.11/Dapi_data/#dotenv","title":"DotENV","text":"<pre><code>local dapi_dotenv = require(\"dapi_dotenv\")\n</code></pre>"},{"location":"v0.1.11/Dapi_data/#get","title":"get","text":"<p>Gets the value of an environment variable.</p> <p>Lua Usage</p> <pre><code>local value = dapi_dotenv.get(\"DATABASE_URL\")\nif value then\n  print(\"Found:\", value)\nelse\n  print(\"Not set\")\nend\n</code></pre> <p>Returns - <code>string</code>: the value if found - <code>nil</code>: if the variable is not set</p>"},{"location":"v0.1.11/Dapi_data/#load","title":"load","text":"<p>Loads environment variables from a <code>.env</code> file into the process environment.</p> <p>Lua Usage</p> <pre><code>dapi_dotenv.load()             -- loads from \".env\" by default\ndapi_dotenv.load(\"custom.env\") -- loads from a custom file\n</code></pre> <p>Errors Returns a Lua error if the file could not be found or parsed.</p>"},{"location":"v0.1.11/Dapi_data/#set","title":"set","text":"<p>Sets an environment variable (unsafe in multi-threaded contexts).</p> <p>This uses <code>std::env::set_var</code>, which is <code>unsafe</code> as of Rust 1.77. Only use this in single-threaded scenarios.</p> <p>Lua Usage</p> <pre><code>dapi_dotenv.set(\"MY_VAR\", \"123\")\nprint(dapi_dotenv.get(\"MY_VAR\")) --&gt; \"123\"\n</code></pre> <p>Safety This function uses an <code>unsafe</code> block because modifying environment variables is not thread-safe across all platforms.</p> <p>Errors Returns a Lua error if key or value contain null bytes (<code>\\0</code>), which are invalid.</p>"},{"location":"v0.1.12/","title":"Version 0.1.12","text":"<ul> <li>Release Date: 08.10.2025</li> </ul>"},{"location":"v0.1.12/#download","title":"Download","text":"<ul> <li>v0.1.12</li> </ul>"},{"location":"v0.1.12/#changelog-added-yaml-parser","title":"Changelog- added yaml parser","text":"<ul> <li>updated install script</li> <li>delered NSIS Admin Installer</li> <li>added a function to wait for a certain period of time</li> <li>added Ini Parser</li> <li>added Data Tests</li> <li>added Base64 Encoding</li> <li>added a function to copy a dir recursivly</li> <li>added a function to get the file size</li> <li>added Desktop Shortcut to the NSIS Installer</li> <li>added XML Parser</li> <li>added better help Message</li> </ul> <p>Read the DOCS for Version 0.1.12 for more Infos</p>"},{"location":"v0.1.12/#info","title":"Info","text":"<p>Documentation is NOT complete yet, but all funktion headers are listed in the documentation</p>"},{"location":"v0.1.12/Dapi/","title":"Dapi","text":""},{"location":"v0.1.12/Dapi/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi = require(\"dapi\")\n</code></pre>"},{"location":"v0.1.12/Dapi/#greet","title":"greet","text":""},{"location":"v0.1.12/Dapi/#add","title":"add","text":""},{"location":"v0.1.12/Dapi/#version","title":"version","text":"<p>a function which returns the current running version of luajit as a string</p> <p>Usage</p> <pre><code>print(dapi.version())\n</code></pre>"},{"location":"v0.1.12/Dapi/#check_version","title":"check_version","text":"<p>a function to check if the correct version of Luajit is used, first parameter is the correct Version and second parameter is a Boolean for showing a warning or info message</p> <p>Usage</p> <pre><code>dapi.check_version(\"0.1.9\", true)\n</code></pre>"},{"location":"v0.1.12/Dapi/#download","title":"download","text":"<p><code>download(url: string, destination: string) -&gt; bool</code></p> <p>Downloads a file from a URL and saves it to the given destination path.</p> <p>Usage</p> <pre><code>local ok = dapi.download(\"https://example.com/file.zip\", \"/tmp/file.zip\")\nif ok then\n  print(\"Success!\")\nelse\n  print(\"Failed.\")\nend\n</code></pre> <p>IMPORTANT</p> <p>Returns <code>false</code> on any error (network, file I/O, write failure).</p>"},{"location":"v0.1.12/Dapi/#wait","title":"wait","text":"<p>function to work for certain amount of time, does not work with negative numbers!</p> <p>Usage</p> <pre><code>dapi.wait(1000)\n</code></pre> <p>The Programm will wait 1000 milliseconds (1 seconds) in this Example</p>"},{"location":"v0.1.12/Dapi/#get_colors","title":"get_colors","text":"<p>a function which returns a Lua Table containing a lot of usable ANSI Color Codes for colored output</p> <p>Usage</p> <pre><code>local colors = dapi.get_colors()\nprint(colors.red + \"Hallo\" + colors.end)\n</code></pre> <p>Different Color Codes IMPORANT: Dont use the Color names in UPPERCASES, use lowercase letters instead !!!</p> <pre><code>// Color codes for Colorful printing with Ansi Colorcodes\n// Credit to for colorcodes\n// https://ss64.com/nt/syntax-ansi.html\npub const END: &amp;str = \"\\x1b[0m\";\npub const BOLD: &amp;str = \"\\x1b[1m\";\n\npub const ITALIC: &amp;str = \"\\x1b[3m\";\npub const UNDERLINED: &amp;str = \"\\x1b[4m\";\n\npub const REVERSE_TEXT: &amp;str = \"\\x1b[7m\";\n\npub const NOT_UNDERLINED: &amp;str = \"\\x1b[24m\";\n\npub const POSITIVE_TEXT: &amp;str = \"\\x1b[27m\";\n\npub const BLACK: &amp;str = \"\\x1b[30m\";\npub const RED: &amp;str = \"\\x1b[31m\";\npub const GREEN: &amp;str = \"\\x1b[32m\";\npub const YELLOW: &amp;str = \"\\x1b[33m\";\npub const BLUE:  &amp;str = \"\\x1b[34m\";\npub const PURPLE: &amp;str = \"\\x1b[35m\";\npub const CYAN: &amp;str = \"\\x1b[36m\";\npub const WHITE: &amp;str = \"\\x1b[37m\";\n\npub const BG_BLACK: &amp;str = \"\\x1b[40m\";\npub const BG_RED: &amp;str = \"\\x1b[41m\";\npub const BG_GREEN: &amp;str = \"\\x1b[42m\";\npub const BG_YELLOW: &amp;str = \"\\x1b[43m\";\npub const BG_BLUE:  &amp;str = \"\\x1b[44m\";\npub const BG_PURPLE: &amp;str = \"\\x1b[45m\";\npub const BG_CYAN: &amp;str = \"\\x1b[46m\";\npub const BG_WHITE: &amp;str = \"\\x1b[47m\";\n\npub const BRIGHT_BLACK: &amp;str = \"\\x1b[90m\";\npub const BRIGHT_RED: &amp;str = \"\\x1b[91m\";\npub const BRIGHT_GREEN: &amp;str = \"\\x1b[92m\";\npub const BRIGHT_YELLOW: &amp;str = \"\\x1b[93m\";\npub const BRIGHT_BLUE: &amp;str = \"\\x1b[94m\";\npub const BRIGHT_PURLPE: &amp;str = \"\\x1b[95m\";\npub const BRIGHT_CYAN: &amp;str = \"\\x1b[96m\";\npub const BRIGHT_WHITE: &amp;str = \"\\x1b[97m\";\n\npub const BG_BRIGHT_BLACK: &amp;str = \"\\x1b[100m\";\npub const BG_BRIGHT_RED: &amp;str = \"\\x1b[101m\";\npub const BG_BRIGHT_GREEN: &amp;str = \"\\x1b[102m\";\npub const BG_BRIGHT_YELLOW: &amp;str = \"\\x1b[103m\";\npub const BG_BRIGHT_BLUE: &amp;str = \"\\x1b[104m\";\npub const BG_BRIGHT_PURLPE: &amp;str = \"\\x1b[105m\";\npub const BG_BRIGHT_CYAN: &amp;str = \"\\x1b[106m\";\npub const BG_BRIGHT_WHITE: &amp;str = \"\\x1b[107m\";\n</code></pre>"},{"location":"v0.1.12/Dapi_HTTP/","title":"Dapi HTTP","text":""},{"location":"v0.1.12/Dapi_HTTP/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_http\")\n</code></pre>"},{"location":"v0.1.12/Dapi_HTTP/#start_static_server","title":"start_static_server","text":"<p>function to start a static http server from a directory</p> <p>Usage</p> <pre><code>dapi_http.start_static_server(\".\", 8080)\n</code></pre>"},{"location":"v0.1.12/Dapi_IO/","title":"Dapi IO","text":""},{"location":"v0.1.12/Dapi_IO/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_io = require(\"dapi_io\")\n</code></pre>"},{"location":"v0.1.12/Dapi_IO/#zip","title":"zip","text":""},{"location":"v0.1.12/Dapi_IO/#unzip","title":"unzip","text":""},{"location":"v0.1.12/Dapi_IO/#get_dafault_directories","title":"get_dafault_directories","text":"<p>a function which returns a lua table containing a lot of dafault directories</p> <p>Usage</p> <pre><code>local dir = dapi_io.get_default_directories()\nprint(dir.home)\n</code></pre> <p>Path Overview</p> Name Windows Linux home C:\\Users\\username /home/username desktop documents ~/Documents downloads ~/Downloads music videos pictures config %APPDATA% ~/.config data %APPDATA% ~/.local/share localdata %LOCALAPPDATA% ~/.local/share cache C:\\Users\\username\\AppData\\Local\\Cache ~/.cache"},{"location":"v0.1.12/Dapi_IO/#create_dir","title":"create_dir","text":"<p>function to create a directory recursivly</p> <p>Usage</p> <pre><code>dapi_io.create_dir(\"Wtf\")\n</code></pre>"},{"location":"v0.1.12/Dapi_IO/#delete_dir","title":"delete_dir","text":"<p>function to delete a directory recursivly</p> <p>Usage</p> <pre><code>dapi_io.delete_dir(\"Wtf\")\n</code></pre>"},{"location":"v0.1.12/Dapi_IO/#copy_file","title":"copy_file","text":"<p>function to copy a file</p> <p>Usage</p> <pre><code>dapi_io.copy_file(\"hallo.txt\", \"wtf/hallo.txt\")\n</code></pre>"},{"location":"v0.1.12/Dapi_IO/#copy_dir","title":"copy_dir","text":"<p>function to copy a directory from one place to another place</p> <p>Usage</p> <pre><code>dapi_io.copy_dir(\"/dir\", \"/dir2\")\n</code></pre>"},{"location":"v0.1.12/Dapi_IO/#create_file","title":"create_file","text":""},{"location":"v0.1.12/Dapi_IO/#write_file","title":"write_file","text":""},{"location":"v0.1.12/Dapi_IO/#get_file_size","title":"get_file_size","text":"<p>a function to get the size of an file</p> <p>Usage</p> <pre><code>dapi_os.write_file(\"wtf.txt\")\nlocal size = dapi_os.get_file_size(\"wtf.txt\")\nprint(size)\n</code></pre>"},{"location":"v0.1.12/Dapi_IO/#read_line","title":"<code>read_line()</code>","text":"<p>Reads a text file and returns its contents as a Lua table, line by line. Optionally, a maximum number of lines can be specified.</p> <p>Lua Function Signature</p> <pre><code>lines = read_line(path [, max_lines])\n</code></pre> <p>Parameters</p> Name Type Required Description <code>path</code> <code>string</code> Yes The file path to read from <code>max_lines</code> <code>number</code> No Maximum number of lines to read (optional) <p>Return Value</p> <p>Returns a Lua <code>table</code> where each line of the file is stored as a string:</p> Index Value <code>1</code> First line <code>2</code> Second line <p>Example (in Lua)</p> <pre><code>local lines = read_line(\"example.txt\", 5)\n\nfor i, line in ipairs(lines) do\n    print(i .. \": \" .. line)\nend\n</code></pre> <p>Error Handling</p> <ul> <li>If the file cannot be opened, an error is raised: <code>\"Open file error: &lt;details&gt;\"</code></li> <li>If a line cannot be read, an error is raised: <code>\"Read line error: &lt;details&gt;\"</code></li> <li>File reading stops early if <code>max_lines</code> is provided and reached.</li> </ul>"},{"location":"v0.1.12/Dapi_OS/","title":"Dapi OS","text":""},{"location":"v0.1.12/Dapi_OS/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_os = require(\"dapi_os\")\n</code></pre>"},{"location":"v0.1.12/Dapi_OS/#get_os_info","title":"<code>get_os_info()</code>","text":"<p>This Lua function returns basic system information such as OS type, version, hostname, CPU count, and total memory.</p> <p>Usage</p> <pre><code>table = dapi_os.get_os_info()\n</code></pre> <p>Return Value</p> <p>A Lua <code>table</code> with the following fields:</p> Key Type Description <code>os_type</code> <code>string</code> The operating system type (e.g., <code>\"Linux\"</code>, <code>\"Windows\"</code>) <code>os_release</code> <code>string</code> OS release/version string <code>hostname</code> <code>string</code> The system's hostname <code>cpu_num</code> <code>number</code> Number of available CPU cores <code>mem_total</code> <code>number</code> Total physical memory in kilobytes (KB) <p>Usage Example (in Lua)</p> <pre><code>local info = get_os_info()\n\nprint(\"OS Type:   \" .. info.os_type)\nprint(\"OS Version:\" .. info.os_release)\nprint(\"Hostname:  \" .. info.hostname)\nprint(\"CPU Cores: \" .. info.cpu_num)\nprint(\"RAM Total: \" .. info.mem_total .. \" KB\")\n</code></pre> <p>Error Handling</p> <ul> <li>If any system information is unavailable (e.g., due to permission issues), fallback values are used:</li> <li><code>\"Unknown\"</code> for strings</li> <li><code>0</code> for numbers</li> <li>This ensures the function always returns a valid Lua table without runtime errors.</li> </ul>"},{"location":"v0.1.12/Dapi_OS/#os","title":"<code>os()</code>","text":"<p>to function to check if the current used os is windows, linux or macos and depending on that, run special Code</p> <p>Usage</p> <pre><code>local osdata = dapi_os.os()\n\nif osdata.win then\n    print(\"You are using Windows\")\nelseif osdata.lin then\n    print(\"You are using Linux\")\nelseif osdata.mac then\n    print(\"You are using MacOS\")\nend\n</code></pre>"},{"location":"v0.1.12/Dapi_OS/#chdir","title":"<code>chdir()</code>","text":"<p>a function to change the current execution directory</p> <p>Usage</p> <pre><code>-- create a new directory\ndapi_io.create_dir(\"wtf\")\n\ndapi_os.chdir(\"wtf\")\n</code></pre>"},{"location":"v0.1.12/Dapi_OS/#getcwd","title":"<code>getcwd()</code>","text":"<p>a function which returns the current executing directory as a string</p> <p>Usage</p> <pre><code>local cwd = dapi_os.getcwd()\n</code></pre>"},{"location":"v0.1.12/Dapi_OS/#open_link","title":"<code>open_link()</code>","text":"<p>opens a link in the standard browser of the User</p> <p>Usage</p> <pre><code>dapi_os.open_link(\"https://github.com/shadowdara\")\n</code></pre>"},{"location":"v0.1.12/Dapi_OS/#run","title":"<code>run()</code>","text":""},{"location":"v0.1.12/Dapi_data/","title":"Dapi data","text":""},{"location":"v0.1.12/Dapi_data/#json","title":"JSON","text":""},{"location":"v0.1.12/Dapi_data/#import","title":"import","text":"<pre><code>local dapi_json = require(\"dapi_json\")\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#decode2","title":"decode2","text":"<p>a function to decode JSON to a LUa Table</p> <pre><code>local json_string = \"{allo: \"kkkk\"}\"\nlocal json = dapi_json.decode2(json_string)\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#encode","title":"encode","text":"<p>a function to encode a Lua Table to JSON</p> <pre><code>local lua_table = {\n  key = \"value\",\n  numbers = {1, 2, 3},\n  flag = true,\n}\n\nlocal json_string = dapi_json.encode(lua_table)\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#toml","title":"Toml","text":""},{"location":"v0.1.12/Dapi_data/#import_1","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_toml\")\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#decode","title":"decode","text":"<p>decode toml data to a Lua Table</p> <pre><code>local input = [[\ntitle = \"Mein Beispiel\"\n\n[user]\nname = \"Alice\"\nage = 30\n]]\n\nlocal result = dapi_toml.decode(input)\n\nprint(result.title)           --&gt; \"Mein Beispiel\"\nprint(result.user.name)       --&gt; \"Alice\"\nprint(result.user.age)        --&gt; 30\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#encode_1","title":"encode","text":"<p>encode a Lua table to toml data</p> <pre><code>local data = {\n    title = \"Konfiguration\",\n    settings = {\n        width = 1920,\n        height = 1080,\n        fullscreen = true\n    }\n}\n\nlocal toml_string = dapi_toml.encode(data)\nprint(toml_string)\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#dotenv","title":"DotENV","text":"<pre><code>local dapi_dotenv = require(\"dapi_dotenv\")\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#get","title":"get","text":"<p>Gets the value of an environment variable.</p> <p>Lua Usage</p> <pre><code>local value = dapi_dotenv.get(\"DATABASE_URL\")\nif value then\n  print(\"Found:\", value)\nelse\n  print(\"Not set\")\nend\n</code></pre> <p>Returns - <code>string</code>: the value if found - <code>nil</code>: if the variable is not set</p>"},{"location":"v0.1.12/Dapi_data/#load","title":"load","text":"<p>Loads environment variables from a <code>.env</code> file into the process environment.</p> <p>Lua Usage</p> <pre><code>dapi_dotenv.load()             -- loads from \".env\" by default\ndapi_dotenv.load(\"custom.env\") -- loads from a custom file\n</code></pre> <p>Errors Returns a Lua error if the file could not be found or parsed.</p>"},{"location":"v0.1.12/Dapi_data/#set","title":"set","text":"<p>Sets an environment variable (unsafe in multi-threaded contexts).</p> <p>This uses <code>std::env::set_var</code>, which is <code>unsafe</code> as of Rust 1.77. Only use this in single-threaded scenarios.</p> <p>Lua Usage</p> <pre><code>dapi_dotenv.set(\"MY_VAR\", \"123\")\nprint(dapi_dotenv.get(\"MY_VAR\")) --&gt; \"123\"\n</code></pre> <p>Safety This function uses an <code>unsafe</code> block because modifying environment variables is not thread-safe across all platforms.</p> <p>Errors Returns a Lua error if key or value contain null bytes (<code>\\0</code>), which are invalid.</p>"},{"location":"v0.1.12/Dapi_data/#yaml","title":"Yaml","text":""},{"location":"v0.1.12/Dapi_data/#import_2","title":"import","text":"<pre><code>local dapi_yaml = require(\"dapi_yaml\")\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#yamlencode-and-yamldecode","title":"<code>yaml.encode</code> and <code>yaml.decode</code>","text":"<p>Lua bindings for serializing and deserializing YAML using Rust + <code>mlua</code>.</p> <p>Lua Usage</p> <pre><code>local data = yaml.decode([[\nname: ChatGPT\nversion: 4\nfeatures:\n  - mlua\n  - yaml\n]])\n\nprint(data.name)           --&gt; \"ChatGPT\"\nprint(data.features[1])    --&gt; \"mlua\"\n\nlocal yaml_str = yaml.encode(data)\nprint(yaml_str)\n</code></pre> <p>Functions</p> <p><code>yaml.decode(yaml_str: string) \u2192 table</code></p> <p>Parses a YAML string and returns a Lua table.</p> <p><code>yaml.encode(table: table) \u2192 string</code></p> <p>Serializes a Lua table into a YAML string.</p> <p>Error Handling</p> <ul> <li>Errors are thrown as Lua exceptions if parsing or serialization fails.</li> <li>Invalid Lua types (e.g. userdata, functions) cannot be encoded.</li> </ul>"},{"location":"v0.1.12/Dapi_data/#ini","title":"INI","text":"<p>This API enables conversion between INI files and Lua tables. It is exposed through a <code>register(lua)</code> function that provides two key functions: <code>parse</code> and <code>convert</code>.</p>"},{"location":"v0.1.12/Dapi_data/#import_3","title":"import","text":"<pre><code>local dapi_ini = require(\"dapi_ini\")\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#parseini_string-string-table","title":"<code>parse(ini_string: string) -&gt; table</code>","text":"<p>Description: Parses a string in INI format and returns a Lua table representing the structure and data.</p> <p>Parameters:</p> <ul> <li><code>ini_string</code> (string): The contents of an INI file as a string.</li> </ul> <p>Returns:</p> <ul> <li>(table): A Lua table containing sections and key-value pairs from the INI file.</li> </ul> <p>Example:</p> <pre><code>local ini = [[\n[general]\nname = Max\nactive = true\n\n[settings]\nvolume = 80\n]]\n\nlocal parsed = dapi_ini.parse(ini)\n\n-- Access values:\nprint(parsed.general.name)      --&gt; \"Max\"\nprint(parsed.settings.volume)   --&gt; \"80\"\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#convert","title":"convert","text":"<p>This function takes a Lua Table and returns an INI File as a String</p> <p>Usage</p> <pre><code>-- Using Value from above\nlocal ini_b = dapi_ini.convert(parsed)\nprint(ini_b)\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#base64","title":"Base64","text":""},{"location":"v0.1.12/Dapi_data/#import_4","title":"import","text":"<pre><code>dapi_base64 = require(\"dapi_base64\")\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#encode_2","title":"encode","text":"<p>encodes a Text string to base 64</p>"},{"location":"v0.1.12/Dapi_data/#decode_1","title":"decode","text":"<p>decodes a base64 string back to text</p> <p>Usage</p> <pre><code>local dapi_base64 = require(\"dapi_base64\")\n\nlocal encoded = dapi_base64.encode(\"Hello, Lua!\")\nprint(encoded) -- \"SGVsbG8sIEx1YSE=\"\n\nlocal decoded = dapi_base64.decode(encoded)\nprint(decoded) -- \"Hello, Lua!\"\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#xml","title":"XML","text":"<p>A Lua module for converting between XML strings and Lua tables, using Rust via <code>mlua</code> and <code>xmltree</code>.</p>"},{"location":"v0.1.12/Dapi_data/#import_5","title":"import","text":"<pre><code>local dapi_xml = require(\"dapi_xml\")\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#dapi_xmldecodexml_string-lua_table","title":"<code>dapi_xml.decode(xml_string) -&gt; lua_table</code>","text":"<p>Parses an XML string and returns a structured Lua table.</p> <p>Parameters</p> <ul> <li><code>xml_string</code> (<code>string</code>): A valid XML string.</li> </ul> <p>Returns</p> <ul> <li><code>lua_table</code> (<code>table</code>): The corresponding Lua table structure.</li> </ul> <p>Example</p> <pre><code>local xml = [[\n&lt;person age=\"30\"&gt;\n    &lt;name&gt;John&lt;/name&gt;\n    &lt;hobbies&gt;\n        &lt;hobby&gt;Reading&lt;/hobby&gt;\n        &lt;hobby&gt;Coding&lt;/hobby&gt;\n    &lt;/hobbies&gt;\n&lt;/person&gt;\n]]\n\nlocal lua_table = dapi_xml.decode(xml)\n\n-- Access\nprint(lua_table.person[\"@age\"])          -- \"30\"\nprint(lua_table.person.name)             -- \"John\"\nprint(lua_table.person.hobbies.hobby[1]) -- \"Reading\"\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#dapi_xmlencodelua_table-xml_string","title":"<code>dapi_xml.encode(lua_table) -&gt; xml_string</code>","text":"<p>Converts a Lua table into an XML string.</p> <p>Parameters</p> <ul> <li><code>lua_table</code> (<code>table</code>): A structured Lua table representing XML elements, attributes, and text.</li> </ul> <p>Returns</p> <ul> <li><code>xml_string</code> (<code>string</code>): A valid XML string.</li> </ul> <p>Example</p> <pre><code>local lua_table = {\n    person = {\n        [\"@age\"] = \"30\",\n        name = \"John\",\n        hobbies = {\n            hobby = { \"Reading\", \"Coding\" }\n        }\n    }\n}\n\nlocal xml = dapi_xml.encode(lua_table)\n\nprint(xml)\n--[[\n&lt;root&gt;\n  &lt;person age=\"30\"&gt;\n    &lt;name&gt;John&lt;/name&gt;\n    &lt;hobbies&gt;\n      &lt;hobby&gt;Reading&lt;/hobby&gt;\n      &lt;hobby&gt;Coding&lt;/hobby&gt;\n    &lt;/hobbies&gt;\n  &lt;/person&gt;\n&lt;/root&gt;\n]]\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#xml-to-table-conventions","title":"XML-to-Table Conventions","text":"XML Feature Lua Table Representation Attributes Keys prefixed with <code>@</code> Text content Key <code>#text</code> Repeated tags Lua arrays"},{"location":"v0.1.12/Dapi_data/#examples","title":"Examples:","text":""},{"location":"v0.1.12/Dapi_data/#attributes","title":"Attributes","text":"<pre><code>{ node = { [\"@id\"] = \"123\" } }\n</code></pre> <p>\u2192</p> <pre><code>&lt;node id=\"123\" /&gt;\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#text-content","title":"Text content","text":"<pre><code>{ node = { [\"#text\"] = \"Hello\" } }\n</code></pre> <p>\u2192</p> <pre><code>&lt;node&gt;Hello&lt;/node&gt;\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#multiple-elements","title":"Multiple elements","text":"<pre><code>{ items = { item = { \"A\", \"B\", \"C\" } } }\n</code></pre> <p>\u2192</p> <pre><code>&lt;items&gt;\n  &lt;item&gt;A&lt;/item&gt;\n  &lt;item&gt;B&lt;/item&gt;\n  &lt;item&gt;C&lt;/item&gt;\n&lt;/items&gt;\n</code></pre>"},{"location":"v0.1.12/Dapi_data/#notes","title":"Notes","text":"<ul> <li>The default root tag is <code>&lt;root&gt;</code> when encoding unless the table has a single top-level key.</li> <li>Mixed content (text + child nodes) is only partially supported.</li> <li><code>null</code> values or empty elements are skipped during encoding.</li> </ul>"},{"location":"v0.1.12/Dapi_data/#roundtrip-example","title":"Roundtrip Example","text":"<pre><code>local t = {\n    person = {\n        [\"@id\"] = \"42\",\n        name = {\n            [\"#text\"] = \"Alice\"\n        },\n        active = true\n    }\n}\n\nlocal xml = dapi_xml.encode(t)\nlocal t2 = dapi_xml.decode(xml)\n\nprint(require(\"inspect\")(t2))\n-- Output should closely match the original `t`\n</code></pre>"},{"location":"v0.1.13/","title":"Version 0.1.13","text":"<ul> <li>Release Date: XX.XX.XXXX</li> </ul>"},{"location":"v0.1.13/#download","title":"Download","text":"<ul> <li>v0.1.13</li> </ul>"},{"location":"v0.1.13/#changelog","title":"Changelog","text":"<ul> <li>add auto publish for the mkdocs documentation</li> <li>restructered some Code</li> <li>added async http servers</li> <li>made the whole code async via Tokio</li> <li>added Version parser for modules</li> <li>added command testing script</li> <li>added option to get the Version</li> <li>added Exit Code 1 when an Error happends</li> <li>added better Build for Linux</li> <li>fixed dev container dependescies</li> <li>added NET Library</li> <li>added Script to get all versions</li> <li>reformatted some folders</li> <li>reformatted some scripts</li> <li>added option to give arguments to luajit</li> <li>added Client to the Download File function</li> <li>added Colors to the help Info</li> <li>added Docs to the NSIS Installer for Windows</li> <li>added NSIS Installer to Release Workflow</li> <li>added Docs publish Workflow</li> <li>added Install Workflow for Luajit</li> <li>added async stopwatch to stop time</li> </ul>"},{"location":"v0.1.13/#info","title":"Info","text":"<p>Documentation is NOT complete yet, but all funktion headers are listed in the documentation</p>"},{"location":"v0.1.13/Dapi/","title":"Dapi","text":""},{"location":"v0.1.13/Dapi/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi = require(\"dapi\")\n</code></pre>"},{"location":"v0.1.13/Dapi/#greet","title":"greet","text":""},{"location":"v0.1.13/Dapi/#add","title":"add","text":""},{"location":"v0.1.13/Dapi/#version","title":"version","text":"<p>a function which returns the current running version of luajit as a string</p> <p>Usage</p> <pre><code>print(dapi.version())\n</code></pre>"},{"location":"v0.1.13/Dapi/#check_version","title":"check_version","text":"<p>a function to check if the correct version of Luajit is used, first parameter is the correct Version and second parameter is a Boolean for showing a warning or info message</p> <p>Usage</p> <pre><code>dapi.check_version(\"0.1.9\", true)\n</code></pre>"},{"location":"v0.1.13/Dapi/#download","title":"download","text":"<p><code>download(url: string, destination: string) -&gt; bool</code></p> <ul> <li>Function is deprecated, use <code>dapi_net.download_file()</code> instead</li> </ul> <p>Downloads a file from a URL and saves it to the given destination path.</p> <p>Usage</p> <pre><code>local ok = dapi.download(\"https://example.com/file.zip\", \"/tmp/file.zip\")\nif ok then\n  print(\"Success!\")\nelse\n  print(\"Failed.\")\nend\n</code></pre> <p>IMPORTANT</p> <p>Returns <code>false</code> on any error (network, file I/O, write failure).</p>"},{"location":"v0.1.13/Dapi/#wait","title":"wait","text":"<p>function to work for certain amount of time, does not work with negative numbers!</p> <p>Usage</p> <pre><code>dapi.wait(1000)\n</code></pre> <p>The Programm will wait 1000 milliseconds (1 seconds) in this Example</p>"},{"location":"v0.1.13/Dapi/#get_colors","title":"get_colors","text":"<p>a function which returns a Lua Table containing a lot of usable ANSI Color Codes for colored output</p> <p>Usage</p> <pre><code>local colors = dapi.get_colors()\nprint(colors.red + \"Hallo\" + colors.end)\n</code></pre> <p>Different Color Codes IMPORANT: Dont use the Color names in UPPERCASES, use lowercase letters instead !!!</p> <pre><code>// Color codes for Colorful printing with Ansi Colorcodes\n// Credit to for colorcodes\n// https://ss64.com/nt/syntax-ansi.html\npub const END: &amp;str = \"\\x1b[0m\";\npub const BOLD: &amp;str = \"\\x1b[1m\";\n\npub const ITALIC: &amp;str = \"\\x1b[3m\";\npub const UNDERLINED: &amp;str = \"\\x1b[4m\";\n\npub const REVERSE_TEXT: &amp;str = \"\\x1b[7m\";\n\npub const NOT_UNDERLINED: &amp;str = \"\\x1b[24m\";\n\npub const POSITIVE_TEXT: &amp;str = \"\\x1b[27m\";\n\npub const BLACK: &amp;str = \"\\x1b[30m\";\npub const RED: &amp;str = \"\\x1b[31m\";\npub const GREEN: &amp;str = \"\\x1b[32m\";\npub const YELLOW: &amp;str = \"\\x1b[33m\";\npub const BLUE:  &amp;str = \"\\x1b[34m\";\npub const PURPLE: &amp;str = \"\\x1b[35m\";\npub const CYAN: &amp;str = \"\\x1b[36m\";\npub const WHITE: &amp;str = \"\\x1b[37m\";\n\npub const BG_BLACK: &amp;str = \"\\x1b[40m\";\npub const BG_RED: &amp;str = \"\\x1b[41m\";\npub const BG_GREEN: &amp;str = \"\\x1b[42m\";\npub const BG_YELLOW: &amp;str = \"\\x1b[43m\";\npub const BG_BLUE:  &amp;str = \"\\x1b[44m\";\npub const BG_PURPLE: &amp;str = \"\\x1b[45m\";\npub const BG_CYAN: &amp;str = \"\\x1b[46m\";\npub const BG_WHITE: &amp;str = \"\\x1b[47m\";\n\npub const BRIGHT_BLACK: &amp;str = \"\\x1b[90m\";\npub const BRIGHT_RED: &amp;str = \"\\x1b[91m\";\npub const BRIGHT_GREEN: &amp;str = \"\\x1b[92m\";\npub const BRIGHT_YELLOW: &amp;str = \"\\x1b[93m\";\npub const BRIGHT_BLUE: &amp;str = \"\\x1b[94m\";\npub const BRIGHT_PURLPE: &amp;str = \"\\x1b[95m\";\npub const BRIGHT_CYAN: &amp;str = \"\\x1b[96m\";\npub const BRIGHT_WHITE: &amp;str = \"\\x1b[97m\";\n\npub const BG_BRIGHT_BLACK: &amp;str = \"\\x1b[100m\";\npub const BG_BRIGHT_RED: &amp;str = \"\\x1b[101m\";\npub const BG_BRIGHT_GREEN: &amp;str = \"\\x1b[102m\";\npub const BG_BRIGHT_YELLOW: &amp;str = \"\\x1b[103m\";\npub const BG_BRIGHT_BLUE: &amp;str = \"\\x1b[104m\";\npub const BG_BRIGHT_PURLPE: &amp;str = \"\\x1b[105m\";\npub const BG_BRIGHT_CYAN: &amp;str = \"\\x1b[106m\";\npub const BG_BRIGHT_WHITE: &amp;str = \"\\x1b[107m\";\n</code></pre>"},{"location":"v0.1.13/Dapi_IO/","title":"Dapi IO","text":""},{"location":"v0.1.13/Dapi_IO/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_io = require(\"dapi_io\")\n</code></pre>"},{"location":"v0.1.13/Dapi_IO/#zip","title":"zip","text":""},{"location":"v0.1.13/Dapi_IO/#unzip","title":"unzip","text":""},{"location":"v0.1.13/Dapi_IO/#get_dafault_directories","title":"get_dafault_directories","text":"<p>a function which returns a lua table containing a lot of dafault directories</p> <p>Usage</p> <pre><code>local dir = dapi_io.get_default_directories()\nprint(dir.home)\n</code></pre> <p>Path Overview</p> Name Windows Linux home C:\\Users\\username /home/username desktop documents ~/Documents downloads ~/Downloads music videos pictures config %APPDATA% ~/.config data %APPDATA% ~/.local/share localdata %LOCALAPPDATA% ~/.local/share cache C:\\Users\\username\\AppData\\Local\\Cache ~/.cache"},{"location":"v0.1.13/Dapi_IO/#create_dir","title":"create_dir","text":"<p>function to create a directory recursivly</p> <p>Usage</p> <pre><code>dapi_io.create_dir(\"Wtf\")\n</code></pre>"},{"location":"v0.1.13/Dapi_IO/#delete_dir","title":"delete_dir","text":"<p>function to delete a directory recursivly</p> <p>Usage</p> <pre><code>dapi_io.delete_dir(\"Wtf\")\n</code></pre>"},{"location":"v0.1.13/Dapi_IO/#copy_file","title":"copy_file","text":"<p>function to copy a file</p> <p>Usage</p> <pre><code>dapi_io.copy_file(\"hallo.txt\", \"wtf/hallo.txt\")\n</code></pre>"},{"location":"v0.1.13/Dapi_IO/#copy_dir","title":"copy_dir","text":"<p>function to copy a directory from one place to another place</p> <p>Usage</p> <pre><code>dapi_io.copy_dir(\"/dir\", \"/dir2\")\n</code></pre>"},{"location":"v0.1.13/Dapi_IO/#create_file","title":"create_file","text":""},{"location":"v0.1.13/Dapi_IO/#write_file","title":"write_file","text":""},{"location":"v0.1.13/Dapi_IO/#append_file","title":"append_file","text":"<p>function to add data to an existing file</p> <pre><code>dapi_io.append_file(\"/tmp/test.txt\", \"Zeile 1\\n\")\ndapi_io.append_file(\"/tmp/test.txt\", \"Zeile 2\\n\")\n</code></pre>"},{"location":"v0.1.13/Dapi_IO/#get_file_size","title":"get_file_size","text":"<p>a function to get the size of an file</p> <p>Usage</p> <pre><code>dapi_os.write_file(\"wtf.txt\")\nlocal size = dapi_os.get_file_size(\"wtf.txt\")\nprint(size)\n</code></pre>"},{"location":"v0.1.13/Dapi_IO/#read_line","title":"<code>read_line()</code>","text":"<p>Reads a text file and returns its contents as a Lua table, line by line. Optionally, a maximum number of lines can be specified.</p> <p>Lua Function Signature</p> <pre><code>lines = read_line(path [, max_lines])\n</code></pre> <p>Parameters</p> Name Type Required Description <code>path</code> <code>string</code> Yes The file path to read from <code>max_lines</code> <code>number</code> No Maximum number of lines to read (optional) <p>Return Value</p> <p>Returns a Lua <code>table</code> where each line of the file is stored as a string:</p> Index Value <code>1</code> First line <code>2</code> Second line <p>Example (in Lua)</p> <pre><code>local lines = read_line(\"example.txt\", 5)\n\nfor i, line in ipairs(lines) do\n    print(i .. \": \" .. line)\nend\n</code></pre> <p>Error Handling</p> <ul> <li>If the file cannot be opened, an error is raised: <code>\"Open file error: &lt;details&gt;\"</code></li> <li>If a line cannot be read, an error is raised: <code>\"Read line error: &lt;details&gt;\"</code></li> <li>File reading stops early if <code>max_lines</code> is provided and reached.</li> </ul>"},{"location":"v0.1.13/Dapi_OS/","title":"Dapi OS","text":""},{"location":"v0.1.13/Dapi_OS/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_os = require(\"dapi_os\")\n</code></pre>"},{"location":"v0.1.13/Dapi_OS/#get_os_info","title":"<code>get_os_info()</code>","text":"<p>This Lua function returns basic system information such as OS type, version, hostname, CPU count, and total memory.</p> <p>Usage</p> <pre><code>table = dapi_os.get_os_info()\n</code></pre> <p>Return Value</p> <p>A Lua <code>table</code> with the following fields:</p> Key Type Description <code>os_type</code> <code>string</code> The operating system type (e.g., <code>\"Linux\"</code>, <code>\"Windows\"</code>) <code>os_release</code> <code>string</code> OS release/version string <code>hostname</code> <code>string</code> The system's hostname <code>cpu_num</code> <code>number</code> Number of available CPU cores <code>mem_total</code> <code>number</code> Total physical memory in kilobytes (KB) <p>Usage Example (in Lua)</p> <pre><code>local info = get_os_info()\n\nprint(\"OS Type:   \" .. info.os_type)\nprint(\"OS Version:\" .. info.os_release)\nprint(\"Hostname:  \" .. info.hostname)\nprint(\"CPU Cores: \" .. info.cpu_num)\nprint(\"RAM Total: \" .. info.mem_total .. \" KB\")\n</code></pre> <p>Error Handling</p> <ul> <li>If any system information is unavailable (e.g., due to permission issues), fallback values are used:</li> <li><code>\"Unknown\"</code> for strings</li> <li><code>0</code> for numbers</li> <li>This ensures the function always returns a valid Lua table without runtime errors.</li> </ul>"},{"location":"v0.1.13/Dapi_OS/#os","title":"<code>os()</code>","text":"<p>to function to check if the current used os is windows, linux or macos and depending on that, run special Code</p> <p>Usage</p> <pre><code>local osdata = dapi_os.os()\n\nif osdata.win then\n    print(\"You are using Windows\")\nelseif osdata.lin then\n    print(\"You are using Linux\")\nelseif osdata.mac then\n    print(\"You are using MacOS\")\nend\n</code></pre>"},{"location":"v0.1.13/Dapi_OS/#chdir","title":"<code>chdir()</code>","text":"<p>a function to change the current execution directory</p> <p>Usage</p> <pre><code>-- create a new directory\ndapi_io.create_dir(\"wtf\")\n\ndapi_os.chdir(\"wtf\")\n</code></pre>"},{"location":"v0.1.13/Dapi_OS/#getcwd","title":"<code>getcwd()</code>","text":"<p>a function which returns the current executing directory as a string</p> <p>Usage</p> <pre><code>local cwd = dapi_os.getcwd()\n</code></pre>"},{"location":"v0.1.13/Dapi_OS/#open_link","title":"<code>open_link()</code>","text":"<p>opens a link in the standard browser of the User</p> <p>Usage</p> <pre><code>dapi_os.open_link(\"https://github.com/shadowdara\")\n</code></pre>"},{"location":"v0.1.13/Dapi_OS/#run","title":"<code>run()</code>","text":""},{"location":"v0.1.13/Dapi_data/","title":"JSON","text":""},{"location":"v0.1.13/Dapi_data/#import","title":"import","text":"<pre><code>local dapi_json = require(\"dapi_json\")\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#decode2","title":"decode2","text":"<p>a function to decode JSON to a LUa Table</p> <pre><code>local json_string = \"{allo: \"kkkk\"}\"\nlocal json = dapi_json.decode2(json_string)\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#encode","title":"encode","text":"<p>a function to encode a Lua Table to JSON</p> <pre><code>local lua_table = {\n  key = \"value\",\n  numbers = {1, 2, 3},\n  flag = true,\n}\n\nlocal json_string = dapi_json.encode(lua_table)\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#toml","title":"Toml","text":""},{"location":"v0.1.13/Dapi_data/#import_1","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_toml\")\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#decode","title":"decode","text":"<p>decode toml data to a Lua Table</p> <pre><code>local input = [[\ntitle = \"Mein Beispiel\"\n\n[user]\nname = \"Alice\"\nage = 30\n]]\n\nlocal result = dapi_toml.decode(input)\n\nprint(result.title)           --&gt; \"Mein Beispiel\"\nprint(result.user.name)       --&gt; \"Alice\"\nprint(result.user.age)        --&gt; 30\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#encode_1","title":"encode","text":"<p>encode a Lua table to toml data</p> <pre><code>local data = {\n    title = \"Konfiguration\",\n    settings = {\n        width = 1920,\n        height = 1080,\n        fullscreen = true\n    }\n}\n\nlocal toml_string = dapi_toml.encode(data)\nprint(toml_string)\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#dotenv","title":"DotENV","text":""},{"location":"v0.1.13/Dapi_data/#import_2","title":"import","text":"<pre><code>local dapi_dotenv = require(\"dapi_dotenv\")\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#get","title":"get","text":"<p>Gets the value of an environment variable.</p> <p>Lua Usage</p> <pre><code>local value = dapi_dotenv.get(\"DATABASE_URL\")\nif value then\n  print(\"Found:\", value)\nelse\n  print(\"Not set\")\nend\n</code></pre> <p>Returns - <code>string</code>: the value if found - <code>nil</code>: if the variable is not set</p>"},{"location":"v0.1.13/Dapi_data/#load","title":"load","text":"<p>Loads environment variables from a <code>.env</code> file into the process environment.</p> <p>Lua Usage</p> <pre><code>dapi_dotenv.load()             -- loads from \".env\" by default\ndapi_dotenv.load(\"custom.env\") -- loads from a custom file\n</code></pre> <p>Errors Returns a Lua error if the file could not be found or parsed.</p>"},{"location":"v0.1.13/Dapi_data/#set","title":"set","text":"<p>Sets an environment variable (unsafe in multi-threaded contexts).</p> <p>This uses <code>std::env::set_var</code>, which is <code>unsafe</code> as of Rust 1.77. Only use this in single-threaded scenarios.</p> <p>Lua Usage</p> <pre><code>dapi_dotenv.set(\"MY_VAR\", \"123\")\nprint(dapi_dotenv.get(\"MY_VAR\")) --&gt; \"123\"\n</code></pre> <p>Safety This function uses an <code>unsafe</code> block because modifying environment variables is not thread-safe across all platforms.</p> <p>Errors Returns a Lua error if key or value contain null bytes (<code>\\0</code>), which are invalid.</p>"},{"location":"v0.1.13/Dapi_data/#yaml","title":"Yaml","text":""},{"location":"v0.1.13/Dapi_data/#import_3","title":"import","text":"<pre><code>local dapi_yaml = require(\"dapi_yaml\")\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#yamlencode-and-yamldecode","title":"<code>yaml.encode</code> and <code>yaml.decode</code>","text":"<p>Lua bindings for serializing and deserializing YAML using Rust + <code>mlua</code>.</p> <p>Lua Usage</p> <pre><code>local data = yaml.decode([[\nname: ChatGPT\nversion: 4\nfeatures:\n  - mlua\n  - yaml\n]])\n\nprint(data.name)           --&gt; \"ChatGPT\"\nprint(data.features[1])    --&gt; \"mlua\"\n\nlocal yaml_str = yaml.encode(data)\nprint(yaml_str)\n</code></pre> <p>Functions</p> <p><code>yaml.decode(yaml_str: string) \u2192 table</code></p> <p>Parses a YAML string and returns a Lua table.</p> <p><code>yaml.encode(table: table) \u2192 string</code></p> <p>Serializes a Lua table into a YAML string.</p> <p>Error Handling</p> <ul> <li>Errors are thrown as Lua exceptions if parsing or serialization fails.</li> <li>Invalid Lua types (e.g. userdata, functions) cannot be encoded.</li> </ul>"},{"location":"v0.1.13/Dapi_data/#ini","title":"INI","text":"<p>This API enables conversion between INI files and Lua tables. It is exposed through a <code>register(lua)</code> function that provides two key functions: <code>parse</code> and <code>convert</code>.</p>"},{"location":"v0.1.13/Dapi_data/#import_4","title":"import","text":"<pre><code>local dapi_ini = require(\"dapi_ini\")\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#parseini_string-string-table","title":"<code>parse(ini_string: string) -&gt; table</code>","text":"<p>Description: Parses a string in INI format and returns a Lua table representing the structure and data.</p> <p>Parameters:</p> <ul> <li><code>ini_string</code> (string): The contents of an INI file as a string.</li> </ul> <p>Returns:</p> <ul> <li>(table): A Lua table containing sections and key-value pairs from the INI file.</li> </ul> <p>Example:</p> <pre><code>local ini = [[\n[general]\nname = Max\nactive = true\n\n[settings]\nvolume = 80\n]]\n\nlocal parsed = dapi_ini.parse(ini)\n\n-- Access values:\nprint(parsed.general.name)      --&gt; \"Max\"\nprint(parsed.settings.volume)   --&gt; \"80\"\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#convert","title":"convert","text":"<p>This function takes a Lua Table and returns an INI File as a String</p> <p>Usage</p> <pre><code>-- Using Value from above\nlocal ini_b = dapi_ini.convert(parsed)\nprint(ini_b)\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#base64","title":"Base64","text":""},{"location":"v0.1.13/Dapi_data/#import_5","title":"import","text":"<pre><code>dapi_base64 = require(\"dapi_base64\")\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#encode_2","title":"encode","text":"<p>encodes a Text string to base 64</p>"},{"location":"v0.1.13/Dapi_data/#decode_1","title":"decode","text":"<p>decodes a base64 string back to text</p> <p>Usage</p> <pre><code>local dapi_base64 = require(\"dapi_base64\")\n\nlocal encoded = dapi_base64.encode(\"Hello, Lua!\")\nprint(encoded) -- \"SGVsbG8sIEx1YSE=\"\n\nlocal decoded = dapi_base64.decode(encoded)\nprint(decoded) -- \"Hello, Lua!\"\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#xml","title":"XML","text":"<p>A Lua module for converting between XML strings and Lua tables, using Rust via <code>mlua</code> and <code>xmltree</code>.</p>"},{"location":"v0.1.13/Dapi_data/#import_6","title":"import","text":"<pre><code>local dapi_xml = require(\"dapi_xml\")\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#dapi_xmldecodexml_string-lua_table","title":"<code>dapi_xml.decode(xml_string) -&gt; lua_table</code>","text":"<p>Parses an XML string and returns a structured Lua table.</p> <p>Parameters</p> <ul> <li><code>xml_string</code> (<code>string</code>): A valid XML string.</li> </ul> <p>Returns</p> <ul> <li><code>lua_table</code> (<code>table</code>): The corresponding Lua table structure.</li> </ul> <p>Example</p> <pre><code>local xml = [[\n&lt;person age=\"30\"&gt;\n    &lt;name&gt;John&lt;/name&gt;\n    &lt;hobbies&gt;\n        &lt;hobby&gt;Reading&lt;/hobby&gt;\n        &lt;hobby&gt;Coding&lt;/hobby&gt;\n    &lt;/hobbies&gt;\n&lt;/person&gt;\n]]\n\nlocal lua_table = dapi_xml.decode(xml)\n\n-- Access\nprint(lua_table.person[\"@age\"])          -- \"30\"\nprint(lua_table.person.name)             -- \"John\"\nprint(lua_table.person.hobbies.hobby[1]) -- \"Reading\"\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#dapi_xmlencodelua_table-xml_string","title":"<code>dapi_xml.encode(lua_table) -&gt; xml_string</code>","text":"<p>Converts a Lua table into an XML string.</p> <p>Parameters</p> <ul> <li><code>lua_table</code> (<code>table</code>): A structured Lua table representing XML elements, attributes, and text.</li> </ul> <p>Returns</p> <ul> <li><code>xml_string</code> (<code>string</code>): A valid XML string.</li> </ul> <p>Example</p> <pre><code>local lua_table = {\n    person = {\n        [\"@age\"] = \"30\",\n        name = \"John\",\n        hobbies = {\n            hobby = { \"Reading\", \"Coding\" }\n        }\n    }\n}\n\nlocal xml = dapi_xml.encode(lua_table)\n\nprint(xml)\n--[[\n&lt;root&gt;\n  &lt;person age=\"30\"&gt;\n    &lt;name&gt;John&lt;/name&gt;\n    &lt;hobbies&gt;\n      &lt;hobby&gt;Reading&lt;/hobby&gt;\n      &lt;hobby&gt;Coding&lt;/hobby&gt;\n    &lt;/hobbies&gt;\n  &lt;/person&gt;\n&lt;/root&gt;\n]]\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#xml-to-table-conventions","title":"XML-to-Table Conventions","text":"XML Feature Lua Table Representation Attributes Keys prefixed with <code>@</code> Text content Key <code>#text</code> Repeated tags Lua arrays"},{"location":"v0.1.13/Dapi_data/#examples","title":"Examples:","text":""},{"location":"v0.1.13/Dapi_data/#attributes","title":"Attributes","text":"<pre><code>{ node = { [\"@id\"] = \"123\" } }\n</code></pre> <p>\u2192</p> <pre><code>&lt;node id=\"123\" /&gt;\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#text-content","title":"Text content","text":"<pre><code>{ node = { [\"#text\"] = \"Hello\" } }\n</code></pre> <p>\u2192</p> <pre><code>&lt;node&gt;Hello&lt;/node&gt;\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#multiple-elements","title":"Multiple elements","text":"<pre><code>{ items = { item = { \"A\", \"B\", \"C\" } } }\n</code></pre> <p>\u2192</p> <pre><code>&lt;items&gt;\n  &lt;item&gt;A&lt;/item&gt;\n  &lt;item&gt;B&lt;/item&gt;\n  &lt;item&gt;C&lt;/item&gt;\n&lt;/items&gt;\n</code></pre>"},{"location":"v0.1.13/Dapi_data/#notes","title":"Notes","text":"<ul> <li>The default root tag is <code>&lt;root&gt;</code> when encoding unless the table has a single top-level key.</li> <li>Mixed content (text + child nodes) is only partially supported.</li> <li><code>null</code> values or empty elements are skipped during encoding.</li> </ul>"},{"location":"v0.1.13/Dapi_data/#roundtrip-example","title":"Roundtrip Example","text":"<pre><code>local t = {\n    person = {\n        [\"@id\"] = \"42\",\n        name = {\n            [\"#text\"] = \"Alice\"\n        },\n        active = true\n    }\n}\n\nlocal xml = dapi_xml.encode(t)\nlocal t2 = dapi_xml.decode(xml)\n\nprint(require(\"inspect\")(t2))\n-- Output should closely match the original `t`\n</code></pre>"},{"location":"v0.1.13/HTTP/","title":"Dapi HTTP","text":""},{"location":"v0.1.13/HTTP/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_http\")\n</code></pre>"},{"location":"v0.1.13/HTTP/#start_static_server","title":"start_static_server","text":"<p>function to start a static http server from a directory</p> <p>Usage</p> <pre><code>dapi_http.start_static_server(\".\", 8080)\n</code></pre>"},{"location":"v0.1.13/HTTP_async/","title":"Dapi HTTP Async","text":""},{"location":"v0.1.13/HTTP_async/#import","title":"import","text":"<pre><code>local dapi_http_async = require(\"dapi_http_async\")\n</code></pre>"},{"location":"v0.1.13/HTTP_async/#start_static_server","title":"start_static_server","text":"<p>start a async http server which is running in the background</p> <p>Usage</p> <pre><code>-- Directory, Port\ndapi_http_async.start_static_server(\"public\", 8080)\n</code></pre>"},{"location":"v0.1.13/HTTP_async/#stop_static_server","title":"stop_static_server","text":"<p>stop the async http server which running in the background, does not raises an error when no server is running on that port from luajit</p> <p>Usage</p> <pre><code>-- Port\ndapi_http_async.stop_static_server(8080)\n</code></pre>"},{"location":"v0.1.13/NET/","title":"NET","text":""},{"location":"v0.1.13/NET/#fetch","title":"fetch","text":"<ul> <li>url</li> </ul>"},{"location":"v0.1.13/NET/#download_file","title":"download_file","text":"<ul> <li>url, destination</li> </ul>"},{"location":"v0.1.13/Time/","title":"Time","text":""},{"location":"v0.1.13/Time/#import","title":"import","text":"<pre><code>dapi_time = require(\"dapi_time\")\n</code></pre> <p>Example</p> <pre><code>local stopwatch = require(\"stopwatch\")\n\nstopwatch.new_stopwatch(\"sw1\")\nstopwatch.start(\"sw1\")\n\ndapi.wait(3000)\n\nlocal elapsed = stopwatch.read(\"sw1\")\nprint(\"Elapsed time:\", elapsed)\n\nstopwatch.pause(\"sw1\")\ndapi.wait(1000)\n\nlocal paused_time = stopwatch.read(\"sw1\")\nprint(\"Should be same (paused):\", paused_time)\n\nstopwatch.start(\"sw1\")\ndapi.wait(1000)\n\nprint(\"Total after resume:\", stopwatch.read(\"sw1\"))\n\nstopwatch.stop(\"sw1\")\n</code></pre>"},{"location":"v0.1.13/dlm13/","title":"Modules","text":""},{"location":"v0.1.4/","title":"Version 0.1.4","text":"<ul> <li>Release Date: 04.09.2025</li> </ul>"},{"location":"v0.1.4/#download","title":"Download","text":"<ul> <li>v0.1.4</li> </ul>"},{"location":"v0.1.4/#info","title":"Info","text":"<p>Documentation is missing and will be probably not added because the version is deprecated</p>"},{"location":"v0.1.5/","title":"Version 0.1.5","text":"<ul> <li>Release Date: 05.09.2025</li> </ul>"},{"location":"v0.1.5/#download","title":"Download","text":"<ul> <li>v0.1.5</li> </ul>"},{"location":"v0.1.5/#changelog","title":"Changelog","text":"<ul> <li>added Zipping and Unzipping Features</li> </ul>"},{"location":"v0.1.5/#info","title":"Info","text":"<p>Documentation is missing and will be probably not added because the version is deprecated</p>"},{"location":"v0.1.6/","title":"Version 0.1.6","text":"<ul> <li>Release Date: 05.09.2025</li> </ul>"},{"location":"v0.1.6/#download","title":"Download","text":"<ul> <li>v0.1.6</li> </ul>"},{"location":"v0.1.6/#changelog","title":"Changelog","text":"<ul> <li>added OS and Version Info</li> <li>added Lua Test File</li> <li>added Icon for Windows</li> </ul>"},{"location":"v0.1.6/#info","title":"Info","text":"<p>Documentation is missing and will be probably not added because the version is deprecated</p>"},{"location":"v0.1.7/","title":"Version 0.1.7","text":"<ul> <li>Release Date: 07.09.2025</li> </ul>"},{"location":"v0.1.7/#download","title":"Download","text":"<ul> <li>v0.1.7</li> </ul>"},{"location":"v0.1.7/#changelog","title":"Changelog","text":"<ul> <li>added Function to create a directory</li> <li>to create files</li> <li>to write to files</li> <li>added help output</li> </ul>"},{"location":"v0.1.7/#info","title":"Info","text":"<p>Documentation is missing and will be probably not added because the version is deprecated</p>"},{"location":"v0.1.8/","title":"Version 0.1.8","text":"<ul> <li>Release Date: 01.10.2025</li> </ul>"},{"location":"v0.1.8/#download","title":"Download","text":"<ul> <li>v0.1.8</li> </ul>"},{"location":"v0.1.8/#changelog","title":"Changelog","text":"<ul> <li>Read Files Line by Line</li> <li>Restructering the whole Code</li> <li>added return Value to <code>dapi.download</code> function</li> <li>added Version check</li> <li>add static HTTP Server which is not async yet which means the Server blocks the script! Server can be stopped by just pressing enter</li> <li>open with now works on windows</li> </ul>"},{"location":"v0.1.8/#info","title":"Info","text":"<p>Documentation is missing and will be probably not added because the version is deprecated</p>"},{"location":"v0.1.9/","title":"Version 0.1.9","text":"<ul> <li>Release Date: 04.10.2025</li> </ul>"},{"location":"v0.1.9/#download","title":"Download","text":"<ul> <li>v0.1.9</li> </ul>"},{"location":"v0.1.9/#changelog","title":"Changelog","text":"<ul> <li>made the deprecated warning yellow</li> <li>reorganisized some code</li> <li>added ANSI Colorcodes</li> <li>added Lua Function to get the colorcodes</li> <li>started Docs</li> <li>updated check version message</li> <li>add NSIS Installer for windows</li> </ul>"},{"location":"v0.1.9/#info","title":"Info","text":"<p>Documentation is missing and will be probably not added because the version is deprecated</p>"},{"location":"v0.2.0/","title":"Version 0.1.13","text":"<ul> <li>Release Date: XX.XX.XXXX</li> </ul>"},{"location":"v0.2.0/#download","title":"Download","text":"<ul> <li>v0.1.13</li> </ul>"},{"location":"v0.2.0/#changelog","title":"Changelog","text":"<ul> <li>add auto publish for the mkdocs documentation</li> <li>restructered some Code</li> <li>added async http servers</li> <li>made the whole code async via Tokio</li> </ul>"},{"location":"v0.2.0/#info","title":"Info","text":"<p>Documentation is NOT complete yet, but all funktion headers are listed in the documentation</p>"},{"location":"v0.2.0/#all-imports","title":"All Imports","text":"<pre><code>local dapi = require(\"dapi\")\nlocal dapi_io = require(\"dapi_io\")\nlocal dapi_os = require(\"dapi_os\")\nlocal dapi_http = require(\"dapi_http\")\nlocal dapi_json = require(\"dapi_json\")\nlocal dapi_toml = require(\"dapi_toml\")\nlocal dapi_dotenv = require(\"dapi_dotenv\")\nlocal dapi_yaml = require(\"dapi_yaml\")\nlocal dapi_ini  = require(\"dapi_ini\")\nlocal dapi_base64 = require(\"dapi_base64\")\nlocal dapi_xml = require(\"dapi_xml\")\nlocal dapi_http_async = require(\"dapi_http_async\")\nlocal dapi_net = require(\"dapi_net\")\nlocal dapi_time = require(\"dapi_time\")\nlocal dapi_api_async = require(\"dapi_api_async\")\n</code></pre>"},{"location":"v0.2.0/Dapi/","title":"Dapi","text":""},{"location":"v0.2.0/Dapi/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi = require(\"dapi\")\n</code></pre>"},{"location":"v0.2.0/Dapi/#greet","title":"greet","text":""},{"location":"v0.2.0/Dapi/#add","title":"add","text":""},{"location":"v0.2.0/Dapi/#version","title":"version","text":"<p>a function which returns the current running version of luajit as a string</p> <p>Usage</p> <pre><code>print(dapi.version())\n</code></pre>"},{"location":"v0.2.0/Dapi/#check_version","title":"check_version","text":"<p>a function to check if the correct version of Luajit is used, first parameter is the correct Version and second optional parameter is a Boolean for showing a warning or info message, the third arguments is although optional and if true, the script will throw an error when the wrong version is used.</p> <p>Usage</p> <pre><code>dapi.check_version(\"0.1.9\", true, false)\n</code></pre>"},{"location":"v0.2.0/Dapi/#throw_error","title":"throw_error","text":"<p>a function to throw an error with a custom Message an interupt the script</p> <p>Usage</p> <pre><code>dapi.throw_error(\"Bonjour\")\n</code></pre>"},{"location":"v0.2.0/Dapi/#download","title":"download","text":"<p><code>download(url: string, destination: string) -&gt; bool</code></p> <ul> <li>Function is deprecated, use <code>dapi_net.download_file()</code> instead</li> </ul> <p>Downloads a file from a URL and saves it to the given destination path.</p> <p>Usage</p> <pre><code>local ok = dapi.download(\"https://example.com/file.zip\", \"/tmp/file.zip\")\nif ok then\n  print(\"Success!\")\nelse\n  print(\"Failed.\")\nend\n</code></pre> <p>IMPORTANT</p> <p>Returns <code>false</code> on any error (network, file I/O, write failure).</p>"},{"location":"v0.2.0/Dapi/#wait","title":"wait","text":"<p>function to work for certain amount of time, does not work with negative numbers!</p> <p>Usage</p> <pre><code>dapi.wait(1000)\n</code></pre> <p>The Programm will wait 1000 milliseconds (1 seconds) in this Example</p>"},{"location":"v0.2.0/Dapi/#clear","title":"clear","text":"<p>a function to clear the Terminal Window</p> <p>Usage</p> <pre><code>dapi.clear()\n</code></pre>"},{"location":"v0.2.0/Dapi/#get_colors","title":"get_colors","text":"<p>a function which returns a Lua Table containing a lot of usable ANSI Color Codes for colored output</p> <p>Usage</p> <pre><code>local colors = dapi.get_colors()\nprint(colors.red + \"Hallo\" + colors.end)\n</code></pre> <p>Different Color Codes IMPORANT: Dont use the Color names in UPPERCASES, use lowercase letters instead !!!</p> <pre><code>// Color codes for Colorful printing with Ansi Colorcodes\n// Credit to for colorcodes\n// https://ss64.com/nt/syntax-ansi.html\npub const END: &amp;str = \"\\x1b[0m\";\npub const BOLD: &amp;str = \"\\x1b[1m\";\n\npub const ITALIC: &amp;str = \"\\x1b[3m\";\npub const UNDERLINED: &amp;str = \"\\x1b[4m\";\n\npub const REVERSE_TEXT: &amp;str = \"\\x1b[7m\";\n\npub const NOT_UNDERLINED: &amp;str = \"\\x1b[24m\";\n\npub const POSITIVE_TEXT: &amp;str = \"\\x1b[27m\";\n\npub const BLACK: &amp;str = \"\\x1b[30m\";\npub const RED: &amp;str = \"\\x1b[31m\";\npub const GREEN: &amp;str = \"\\x1b[32m\";\npub const YELLOW: &amp;str = \"\\x1b[33m\";\npub const BLUE:  &amp;str = \"\\x1b[34m\";\npub const PURPLE: &amp;str = \"\\x1b[35m\";\npub const CYAN: &amp;str = \"\\x1b[36m\";\npub const WHITE: &amp;str = \"\\x1b[37m\";\n\npub const BG_BLACK: &amp;str = \"\\x1b[40m\";\npub const BG_RED: &amp;str = \"\\x1b[41m\";\npub const BG_GREEN: &amp;str = \"\\x1b[42m\";\npub const BG_YELLOW: &amp;str = \"\\x1b[43m\";\npub const BG_BLUE:  &amp;str = \"\\x1b[44m\";\npub const BG_PURPLE: &amp;str = \"\\x1b[45m\";\npub const BG_CYAN: &amp;str = \"\\x1b[46m\";\npub const BG_WHITE: &amp;str = \"\\x1b[47m\";\n\npub const BRIGHT_BLACK: &amp;str = \"\\x1b[90m\";\npub const BRIGHT_RED: &amp;str = \"\\x1b[91m\";\npub const BRIGHT_GREEN: &amp;str = \"\\x1b[92m\";\npub const BRIGHT_YELLOW: &amp;str = \"\\x1b[93m\";\npub const BRIGHT_BLUE: &amp;str = \"\\x1b[94m\";\npub const BRIGHT_PURLPE: &amp;str = \"\\x1b[95m\";\npub const BRIGHT_CYAN: &amp;str = \"\\x1b[96m\";\npub const BRIGHT_WHITE: &amp;str = \"\\x1b[97m\";\n\npub const BG_BRIGHT_BLACK: &amp;str = \"\\x1b[100m\";\npub const BG_BRIGHT_RED: &amp;str = \"\\x1b[101m\";\npub const BG_BRIGHT_GREEN: &amp;str = \"\\x1b[102m\";\npub const BG_BRIGHT_YELLOW: &amp;str = \"\\x1b[103m\";\npub const BG_BRIGHT_BLUE: &amp;str = \"\\x1b[104m\";\npub const BG_BRIGHT_PURLPE: &amp;str = \"\\x1b[105m\";\npub const BG_BRIGHT_CYAN: &amp;str = \"\\x1b[106m\";\npub const BG_BRIGHT_WHITE: &amp;str = \"\\x1b[107m\";\n</code></pre>"},{"location":"v0.2.0/Dapi_IO/","title":"Dapi IO","text":""},{"location":"v0.2.0/Dapi_IO/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_io = require(\"dapi_io\")\n</code></pre>"},{"location":"v0.2.0/Dapi_IO/#zip","title":"zip","text":""},{"location":"v0.2.0/Dapi_IO/#unzip","title":"unzip","text":""},{"location":"v0.2.0/Dapi_IO/#get_dafault_directories","title":"get_dafault_directories","text":"<p>a function which returns a lua table containing a lot of dafault directories</p> <p>Usage</p> <pre><code>local dir = dapi_io.get_default_directories()\nprint(dir.home)\n</code></pre> <p>Path Overview</p> Name Windows Linux home C:\\Users\\username /home/username desktop documents ~/Documents downloads ~/Downloads music videos pictures config %APPDATA% ~/.config data %APPDATA% ~/.local/share localdata %LOCALAPPDATA% ~/.local/share cache C:\\Users\\username\\AppData\\Local\\Cache ~/.cache startmenu local startmenu"},{"location":"v0.2.0/Dapi_IO/#create_dir","title":"create_dir","text":"<p>function to create a directory recursivly</p> <p>Usage</p> <pre><code>dapi_io.create_dir(\"Wtf\")\n</code></pre>"},{"location":"v0.2.0/Dapi_IO/#delete_dir","title":"delete_dir","text":"<p>function to delete a directory recursivly</p> <p>Usage</p> <pre><code>dapi_io.delete_dir(\"Wtf\")\n</code></pre>"},{"location":"v0.2.0/Dapi_IO/#copy_file","title":"copy_file","text":"<p>function to copy a file</p> <p>Usage</p> <pre><code>dapi_io.copy_file(\"hallo.txt\", \"wtf/hallo.txt\")\n</code></pre>"},{"location":"v0.2.0/Dapi_IO/#copy_dir","title":"copy_dir","text":"<p>function to copy a directory from one place to another place</p> <p>Usage</p> <pre><code>dapi_io.copy_dir(\"/dir\", \"/dir2\")\n</code></pre>"},{"location":"v0.2.0/Dapi_IO/#create_file","title":"create_file","text":""},{"location":"v0.2.0/Dapi_IO/#write_file","title":"write_file","text":""},{"location":"v0.2.0/Dapi_IO/#append_file","title":"append_file","text":"<p>function to add data to an existing file</p> <pre><code>dapi_io.append_file(\"/tmp/test.txt\", \"Zeile 1\\n\")\ndapi_io.append_file(\"/tmp/test.txt\", \"Zeile 2\\n\")\n</code></pre>"},{"location":"v0.2.0/Dapi_IO/#get_file_size","title":"get_file_size","text":"<p>a function to get the size of an file</p> <p>Usage</p> <pre><code>dapi_os.write_file(\"wtf.txt\")\nlocal size = dapi_os.get_file_size(\"wtf.txt\")\nprint(size)\n</code></pre>"},{"location":"v0.2.0/Dapi_IO/#read_line","title":"<code>read_line()</code>","text":"<p>Reads a text file and returns its contents as a Lua table, line by line. Optionally, a maximum number of lines can be specified.</p> <p>Lua Function Signature</p> <pre><code>lines = read_line(path [, max_lines])\n</code></pre> <p>Parameters</p> Name Type Required Description <code>path</code> <code>string</code> Yes The file path to read from <code>max_lines</code> <code>number</code> No Maximum number of lines to read (optional) <p>Return Value</p> <p>Returns a Lua <code>table</code> where each line of the file is stored as a string:</p> Index Value <code>1</code> First line <code>2</code> Second line <p>Example (in Lua)</p> <pre><code>local lines = read_line(\"example.txt\", 5)\n\nfor i, line in ipairs(lines) do\n    print(i .. \": \" .. line)\nend\n</code></pre> <p>Error Handling</p> <ul> <li>If the file cannot be opened, an error is raised: <code>\"Open file error: &lt;details&gt;\"</code></li> <li>If a line cannot be read, an error is raised: <code>\"Read line error: &lt;details&gt;\"</code></li> <li>File reading stops early if <code>max_lines</code> is provided and reached.</li> </ul>"},{"location":"v0.2.0/Dapi_OS/","title":"Dapi OS","text":""},{"location":"v0.2.0/Dapi_OS/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_os = require(\"dapi_os\")\n</code></pre>"},{"location":"v0.2.0/Dapi_OS/#get_os_info","title":"<code>get_os_info()</code>","text":"<p>This Lua function returns basic system information such as OS type, version, hostname, CPU count, and total memory.</p> <p>Usage</p> <pre><code>table = dapi_os.get_os_info()\n</code></pre> <p>Return Value</p> <p>A Lua <code>table</code> with the following fields:</p> Key Type Description <code>os_type</code> <code>string</code> The operating system type (e.g., <code>\"Linux\"</code>, <code>\"Windows\"</code>) <code>os_release</code> <code>string</code> OS release/version string <code>hostname</code> <code>string</code> The system's hostname <code>cpu_num</code> <code>number</code> Number of available CPU cores <code>mem_total</code> <code>number</code> Total physical memory in kilobytes (KB) <p>Usage Example (in Lua)</p> <pre><code>local info = get_os_info()\n\nprint(\"OS Type:   \" .. info.os_type)\nprint(\"OS Version:\" .. info.os_release)\nprint(\"Hostname:  \" .. info.hostname)\nprint(\"CPU Cores: \" .. info.cpu_num)\nprint(\"RAM Total: \" .. info.mem_total .. \" KB\")\n</code></pre> <p>Error Handling</p> <ul> <li>If any system information is unavailable (e.g., due to permission issues), fallback values are used:</li> <li><code>\"Unknown\"</code> for strings</li> <li><code>0</code> for numbers</li> <li>This ensures the function always returns a valid Lua table without runtime errors.</li> </ul>"},{"location":"v0.2.0/Dapi_OS/#os","title":"<code>os()</code>","text":"<p>to function to check if the current used os is windows, linux or macos and depending on that, run special Code</p> <p>Usage</p> <pre><code>local osdata = dapi_os.os()\n\nif osdata.win then\n    print(\"You are using Windows\")\nelseif osdata.lin then\n    print(\"You are using Linux\")\nelseif osdata.mac then\n    print(\"You are using MacOS\")\nend\n</code></pre>"},{"location":"v0.2.0/Dapi_OS/#chdir","title":"<code>chdir()</code>","text":"<p>a function to change the current execution directory</p> <p>Usage</p> <pre><code>-- create a new directory\ndapi_io.create_dir(\"wtf\")\n\ndapi_os.chdir(\"wtf\")\n</code></pre>"},{"location":"v0.2.0/Dapi_OS/#getcwd","title":"<code>getcwd()</code>","text":"<p>a function which returns the current executing directory as a string</p> <p>Usage</p> <pre><code>local cwd = dapi_os.getcwd()\n</code></pre>"},{"location":"v0.2.0/Dapi_OS/#open_link","title":"<code>open_link()</code>","text":"<p>opens a link in the standard browser of the User</p> <p>Usage</p> <pre><code>dapi_os.open_link(\"https://github.com/shadowdara\")\n</code></pre>"},{"location":"v0.2.0/Dapi_OS/#open","title":"<code>open</code>","text":"<p>function to open a file or a link or etc in the standard programm of the users computer</p> <p>Usage</p> <pre><code>dapi_os.open(\"https://github.com/shadowdara/flua\")\ndapi_os.open(\"sample.pdf\")\n</code></pre>"},{"location":"v0.2.0/Dapi_OS/#run","title":"<code>run()</code>","text":""},{"location":"v0.2.0/Dapi_OS/#run2","title":"<code>run2()</code>","text":"<p>runs a command with instant no flush, the command does not wait with the output until its finished</p>"},{"location":"v0.2.0/Dapi_OS/#run3","title":"<code>run3()</code>","text":"<p>run a command async</p>"},{"location":"v0.2.0/Dapi_OS/#split_path","title":"<code>split_path()</code>","text":""},{"location":"v0.2.0/Dapi_OS/#secure_path","title":"<code>secure_path()</code>","text":""},{"location":"v0.2.0/Dapi_OS/#join_path","title":"<code>join_path()</code>","text":""},{"location":"v0.2.0/Dapi_data/","title":"JSON","text":""},{"location":"v0.2.0/Dapi_data/#import","title":"import","text":"<pre><code>local dapi_json = require(\"dapi_json\")\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#decode2","title":"decode2","text":"<p>a function to decode JSON to a LUa Table</p> <pre><code>local json_string = \"{allo: \"kkkk\"}\"\nlocal json = dapi_json.decode2(json_string)\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#decode_with_comments","title":"decode_with_comments()","text":""},{"location":"v0.2.0/Dapi_data/#encode","title":"encode","text":"<p>a function to encode a Lua Table to JSON</p> <p>the function has an Optionl 2nd Argument, set this to true to get pretty JSON</p> <p>Usage</p> <pre><code>local lua_table = {\n  key = \"value\",\n  numbers = {1, 2, 3},\n  flag = true,\n}\n\nlocal json_string = dapi_json.encode(lua_table)\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#toml","title":"Toml","text":""},{"location":"v0.2.0/Dapi_data/#import_1","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_toml\")\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#decode","title":"decode","text":"<p>decode toml data to a Lua Table</p> <pre><code>local input = [[\ntitle = \"Mein Beispiel\"\n\n[user]\nname = \"Alice\"\nage = 30\n]]\n\nlocal result = dapi_toml.decode(input)\n\nprint(result.title)           --&gt; \"Mein Beispiel\"\nprint(result.user.name)       --&gt; \"Alice\"\nprint(result.user.age)        --&gt; 30\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#encode_1","title":"encode","text":"<p>encode a Lua table to toml data</p> <pre><code>local data = {\n    title = \"Konfiguration\",\n    settings = {\n        width = 1920,\n        height = 1080,\n        fullscreen = true\n    }\n}\n\nlocal toml_string = dapi_toml.encode(data)\nprint(toml_string)\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#dotenv","title":"DotENV","text":""},{"location":"v0.2.0/Dapi_data/#import_2","title":"import","text":"<pre><code>local dapi_dotenv = require(\"dapi_dotenv\")\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#get","title":"get","text":"<p>Gets the value of an environment variable.</p> <p>Lua Usage</p> <pre><code>local value = dapi_dotenv.get(\"DATABASE_URL\")\nif value then\n  print(\"Found:\", value)\nelse\n  print(\"Not set\")\nend\n</code></pre> <p>Returns - <code>string</code>: the value if found - <code>nil</code>: if the variable is not set</p>"},{"location":"v0.2.0/Dapi_data/#load","title":"load","text":"<p>Loads environment variables from a <code>.env</code> file into the process environment.</p> <p>Lua Usage</p> <pre><code>dapi_dotenv.load()             -- loads from \".env\" by default\ndapi_dotenv.load(\"custom.env\") -- loads from a custom file\n</code></pre> <p>Errors Returns a Lua error if the file could not be found or parsed.</p>"},{"location":"v0.2.0/Dapi_data/#set","title":"set","text":"<p>Sets an environment variable (unsafe in multi-threaded contexts).</p> <p>This uses <code>std::env::set_var</code>, which is <code>unsafe</code> as of Rust 1.77. Only use this in single-threaded scenarios.</p> <p>Lua Usage</p> <pre><code>dapi_dotenv.set(\"MY_VAR\", \"123\")\nprint(dapi_dotenv.get(\"MY_VAR\")) --&gt; \"123\"\n</code></pre> <p>Safety This function uses an <code>unsafe</code> block because modifying environment variables is not thread-safe across all platforms.</p> <p>Errors Returns a Lua error if key or value contain null bytes (<code>\\0</code>), which are invalid.</p>"},{"location":"v0.2.0/Dapi_data/#yaml","title":"Yaml","text":""},{"location":"v0.2.0/Dapi_data/#import_3","title":"import","text":"<pre><code>local dapi_yaml = require(\"dapi_yaml\")\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#yamlencode-and-yamldecode","title":"<code>yaml.encode</code> and <code>yaml.decode</code>","text":"<p>Lua bindings for serializing and deserializing YAML using Rust + <code>mlua</code>.</p> <p>Lua Usage</p> <pre><code>local data = yaml.decode([[\nname: ChatGPT\nversion: 4\nfeatures:\n  - mlua\n  - yaml\n]])\n\nprint(data.name)           --&gt; \"ChatGPT\"\nprint(data.features[1])    --&gt; \"mlua\"\n\nlocal yaml_str = yaml.encode(data)\nprint(yaml_str)\n</code></pre> <p>Functions</p> <p><code>yaml.decode(yaml_str: string) \u2192 table</code></p> <p>Parses a YAML string and returns a Lua table.</p> <p><code>yaml.encode(table: table) \u2192 string</code></p> <p>Serializes a Lua table into a YAML string.</p> <p>Error Handling</p> <ul> <li>Errors are thrown as Lua exceptions if parsing or serialization fails.</li> <li>Invalid Lua types (e.g. userdata, functions) cannot be encoded.</li> </ul>"},{"location":"v0.2.0/Dapi_data/#ini","title":"INI","text":"<p>This API enables conversion between INI files and Lua tables. It is exposed through a <code>register(lua)</code> function that provides two key functions: <code>parse</code> and <code>convert</code>.</p>"},{"location":"v0.2.0/Dapi_data/#import_4","title":"import","text":"<pre><code>local dapi_ini = require(\"dapi_ini\")\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#parseini_string-string-table","title":"<code>parse(ini_string: string) -&gt; table</code>","text":"<p>Description: Parses a string in INI format and returns a Lua table representing the structure and data.</p> <p>Parameters:</p> <ul> <li><code>ini_string</code> (string): The contents of an INI file as a string.</li> </ul> <p>Returns:</p> <ul> <li>(table): A Lua table containing sections and key-value pairs from the INI file.</li> </ul> <p>Example:</p> <pre><code>local ini = [[\n[general]\nname = Max\nactive = true\n\n[settings]\nvolume = 80\n]]\n\nlocal parsed = dapi_ini.parse(ini)\n\n-- Access values:\nprint(parsed.general.name)      --&gt; \"Max\"\nprint(parsed.settings.volume)   --&gt; \"80\"\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#convert","title":"convert","text":"<p>This function takes a Lua Table and returns an INI File as a String</p> <p>Usage</p> <pre><code>-- Using Value from above\nlocal ini_b = dapi_ini.convert(parsed)\nprint(ini_b)\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#base64","title":"Base64","text":""},{"location":"v0.2.0/Dapi_data/#import_5","title":"import","text":"<pre><code>dapi_base64 = require(\"dapi_base64\")\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#encode_2","title":"encode","text":"<p>encodes a Text string to base 64</p>"},{"location":"v0.2.0/Dapi_data/#decode_1","title":"decode","text":"<p>decodes a base64 string back to text</p> <p>Usage</p> <pre><code>local dapi_base64 = require(\"dapi_base64\")\n\nlocal encoded = dapi_base64.encode(\"Hello, Lua!\")\nprint(encoded) -- \"SGVsbG8sIEx1YSE=\"\n\nlocal decoded = dapi_base64.decode(encoded)\nprint(decoded) -- \"Hello, Lua!\"\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#xml","title":"XML","text":"<p>A Lua module for converting between XML strings and Lua tables, using Rust via <code>mlua</code> and <code>xmltree</code>.</p>"},{"location":"v0.2.0/Dapi_data/#import_6","title":"import","text":"<pre><code>local dapi_xml = require(\"dapi_xml\")\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#dapi_xmldecodexml_string-lua_table","title":"<code>dapi_xml.decode(xml_string) -&gt; lua_table</code>","text":"<p>Parses an XML string and returns a structured Lua table.</p> <p>Parameters</p> <ul> <li><code>xml_string</code> (<code>string</code>): A valid XML string.</li> </ul> <p>Returns</p> <ul> <li><code>lua_table</code> (<code>table</code>): The corresponding Lua table structure.</li> </ul> <p>Example</p> <pre><code>local xml = [[\n&lt;person age=\"30\"&gt;\n    &lt;name&gt;John&lt;/name&gt;\n    &lt;hobbies&gt;\n        &lt;hobby&gt;Reading&lt;/hobby&gt;\n        &lt;hobby&gt;Coding&lt;/hobby&gt;\n    &lt;/hobbies&gt;\n&lt;/person&gt;\n]]\n\nlocal lua_table = dapi_xml.decode(xml)\n\n-- Access\nprint(lua_table.person[\"@age\"])          -- \"30\"\nprint(lua_table.person.name)             -- \"John\"\nprint(lua_table.person.hobbies.hobby[1]) -- \"Reading\"\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#dapi_xmlencodelua_table-xml_string","title":"<code>dapi_xml.encode(lua_table) -&gt; xml_string</code>","text":"<p>Converts a Lua table into an XML string.</p> <p>Parameters</p> <ul> <li><code>lua_table</code> (<code>table</code>): A structured Lua table representing XML elements, attributes, and text.</li> </ul> <p>Returns</p> <ul> <li><code>xml_string</code> (<code>string</code>): A valid XML string.</li> </ul> <p>Example</p> <pre><code>local lua_table = {\n    person = {\n        [\"@age\"] = \"30\",\n        name = \"John\",\n        hobbies = {\n            hobby = { \"Reading\", \"Coding\" }\n        }\n    }\n}\n\nlocal xml = dapi_xml.encode(lua_table)\n\nprint(xml)\n--[[\n&lt;root&gt;\n  &lt;person age=\"30\"&gt;\n    &lt;name&gt;John&lt;/name&gt;\n    &lt;hobbies&gt;\n      &lt;hobby&gt;Reading&lt;/hobby&gt;\n      &lt;hobby&gt;Coding&lt;/hobby&gt;\n    &lt;/hobbies&gt;\n  &lt;/person&gt;\n&lt;/root&gt;\n]]\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#xml-to-table-conventions","title":"XML-to-Table Conventions","text":"XML Feature Lua Table Representation Attributes Keys prefixed with <code>@</code> Text content Key <code>#text</code> Repeated tags Lua arrays"},{"location":"v0.2.0/Dapi_data/#examples","title":"Examples:","text":""},{"location":"v0.2.0/Dapi_data/#attributes","title":"Attributes","text":"<pre><code>{ node = { [\"@id\"] = \"123\" } }\n</code></pre> <p>\u2192</p> <pre><code>&lt;node id=\"123\" /&gt;\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#text-content","title":"Text content","text":"<pre><code>{ node = { [\"#text\"] = \"Hello\" } }\n</code></pre> <p>\u2192</p> <pre><code>&lt;node&gt;Hello&lt;/node&gt;\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#multiple-elements","title":"Multiple elements","text":"<pre><code>{ items = { item = { \"A\", \"B\", \"C\" } } }\n</code></pre> <p>\u2192</p> <pre><code>&lt;items&gt;\n  &lt;item&gt;A&lt;/item&gt;\n  &lt;item&gt;B&lt;/item&gt;\n  &lt;item&gt;C&lt;/item&gt;\n&lt;/items&gt;\n</code></pre>"},{"location":"v0.2.0/Dapi_data/#notes","title":"Notes","text":"<ul> <li>The default root tag is <code>&lt;root&gt;</code> when encoding unless the table has a single top-level key.</li> <li>Mixed content (text + child nodes) is only partially supported.</li> <li><code>null</code> values or empty elements are skipped during encoding.</li> </ul>"},{"location":"v0.2.0/Dapi_data/#roundtrip-example","title":"Roundtrip Example","text":"<pre><code>local t = {\n    person = {\n        [\"@id\"] = \"42\",\n        name = {\n            [\"#text\"] = \"Alice\"\n        },\n        active = true\n    }\n}\n\nlocal xml = dapi_xml.encode(t)\nlocal t2 = dapi_xml.decode(xml)\n\nprint(require(\"inspect\")(t2))\n-- Output should closely match the original `t`\n</code></pre>"},{"location":"v0.2.0/HTTP/","title":"Dapi HTTP","text":""},{"location":"v0.2.0/HTTP/#import","title":"import","text":"<p>to start, you need to import the api in your script, you can do it with</p> <pre><code>local dapi_http = require(\"dapi_http\")\n</code></pre>"},{"location":"v0.2.0/HTTP/#start_static_server","title":"start_static_server","text":"<p>function to start a static http server from a directory</p> <p>Usage</p> <pre><code>dapi_http.start_static_server(\".\", 8080)\n</code></pre>"},{"location":"v0.2.0/HTTP_async/","title":"Dapi HTTP Async","text":""},{"location":"v0.2.0/HTTP_async/#import","title":"import","text":"<pre><code>local dapi_http_async = require(\"dapi_http_async\")\n</code></pre>"},{"location":"v0.2.0/HTTP_async/#start_static_server","title":"start_static_server","text":"<p>start a async http server which is running in the background</p> <p>Usage</p> <pre><code>-- Directory, Port\ndapi_http_async.start_static_server(\"public\", 8080)\n</code></pre>"},{"location":"v0.2.0/HTTP_async/#stop_static_server","title":"stop_static_server","text":"<p>stop the async http server which running in the background, does not raises an error when no server is running on that port from luajit</p> <p>Usage</p> <pre><code>-- Port\ndapi_http_async.stop_static_server(8080)\n</code></pre>"},{"location":"v0.2.0/HTTP_async/#http-api-async","title":"http api async","text":"<p>need to write docs</p>"},{"location":"v0.2.0/NET/","title":"NET","text":""},{"location":"v0.2.0/NET/#fetch","title":"fetch","text":"<ul> <li>url</li> </ul>"},{"location":"v0.2.0/NET/#download_file","title":"download_file","text":"<ul> <li>url, destination</li> </ul>"},{"location":"v0.2.0/Time/","title":"Time","text":""},{"location":"v0.2.0/Time/#import","title":"import","text":"<pre><code>dapi_time = require(\"dapi_time\")\n</code></pre>"},{"location":"v0.2.0/Time/#stopwatch","title":"stopwatch","text":"<p>Example</p> <pre><code>local stopwatch = require(\"stopwatch\")\n\nstopwatch.new_stopwatch(\"sw1\")\nstopwatch.start(\"sw1\")\n\ndapi.wait(3000)\n\nlocal elapsed = stopwatch.read(\"sw1\")\nprint(\"Elapsed time:\", elapsed)\n\nstopwatch.pause(\"sw1\")\ndapi.wait(1000)\n\nlocal paused_time = stopwatch.read(\"sw1\")\nprint(\"Should be same (paused):\", paused_time)\n\nstopwatch.start(\"sw1\")\ndapi.wait(1000)\n\nprint(\"Total after resume:\", stopwatch.read(\"sw1\"))\n\nstopwatch.stop(\"sw1\")\n</code></pre>"},{"location":"v0.2.0/Time/#waitforever","title":"waitforever","text":"<p>a simple wait function which waits until the programm is interrupted with <code>CTRL + C</code> or closed</p> <p>Usage</p> <pre><code>dapi_time.waitfr()\n</code></pre>"},{"location":"v0.2.0/dlm13/","title":"Modules","text":""}]}